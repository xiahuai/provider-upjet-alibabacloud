// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketCnameTokenInitParameters struct {

	// The name of the bucket
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The custom domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`
}

type BucketCnameTokenObservation struct {

	// The name of the bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The custom domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The ID of the resource supplied above.The value is formulated as <bucket>:<domain>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Token used to verify domain ownership
	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type BucketCnameTokenParameters struct {

	// The name of the bucket
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The custom domain
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// BucketCnameTokenSpec defines the desired state of BucketCnameToken
type BucketCnameTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketCnameTokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketCnameTokenInitParameters `json:"initProvider,omitempty"`
}

// BucketCnameTokenStatus defines the observed state of BucketCnameToken.
type BucketCnameTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketCnameTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketCnameToken is the Schema for the BucketCnameTokens API. Provides a Alicloud OSS Bucket Cname Token resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type BucketCnameToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	Spec   BucketCnameTokenSpec   `json:"spec"`
	Status BucketCnameTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketCnameTokenList contains a list of BucketCnameTokens
type BucketCnameTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketCnameToken `json:"items"`
}

// Repository type metadata.
var (
	BucketCnameToken_Kind             = "BucketCnameToken"
	BucketCnameToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketCnameToken_Kind}.String()
	BucketCnameToken_KindAPIVersion   = BucketCnameToken_Kind + "." + CRDGroupVersion.String()
	BucketCnameToken_GroupVersionKind = CRDGroupVersion.WithKind(BucketCnameToken_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketCnameToken{}, &BucketCnameTokenList{})
}
