// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountInitParameters struct {

	// The name of the account. The name must meet the following requirements:
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The password of the account. The password must be 8 to 32 characters in length. It must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include !@ # $ % ^ & * ( ) _ + - =. You have to specify one of account_password and kms_encrypted_password fields.
	AccountPasswordSecretRef *v1.SecretKeySelector `json:"accountPasswordSecretRef,omitempty" tf:"-"`

	// The privilege of account access database. Default value: RoleReadWrite
	AccountPrivilege *string `json:"accountPrivilege,omitempty" tf:"account_privilege,omitempty"`

	// Privilege type of account.
	AccountType *string `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// Database description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Id of instance in which account belongs (The engine version of instance must be 4.0 or 4.0+).
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/tair/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in tair to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in tair to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// An KMS encrypts password used to a Tair (Redis OSS-Compatible) And Memcache (KVStore) account. If the account_password is filled in, this field will be ignored.
	KMSEncryptedPassword *string `json:"kmsEncryptedPassword,omitempty" tf:"kms_encrypted_password,omitempty"`

	// An KMS encryption context used to decrypt kms_encrypted_password before creating or updating a Tair (Redis OSS-Compatible) And Memcache (KVStore) account with kms_encrypted_password. See Encryption Context. It is valid when kms_encrypted_password is set.
	// +mapType=granular
	KMSEncryptionContext map[string]*string `json:"kmsEncryptionContext,omitempty" tf:"kms_encryption_context,omitempty"`
}

type AccountObservation struct {

	// The name of the account. The name must meet the following requirements:
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The privilege of account access database. Default value: RoleReadWrite
	AccountPrivilege *string `json:"accountPrivilege,omitempty" tf:"account_privilege,omitempty"`

	// Privilege type of account.
	AccountType *string `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// Database description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The resource ID of Account. The value is formatted <instance_id>:<account_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Id of instance in which account belongs (The engine version of instance must be 4.0 or 4.0+).
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// An KMS encrypts password used to a Tair (Redis OSS-Compatible) And Memcache (KVStore) account. If the account_password is filled in, this field will be ignored.
	KMSEncryptedPassword *string `json:"kmsEncryptedPassword,omitempty" tf:"kms_encrypted_password,omitempty"`

	// An KMS encryption context used to decrypt kms_encrypted_password before creating or updating a Tair (Redis OSS-Compatible) And Memcache (KVStore) account with kms_encrypted_password. See Encryption Context. It is valid when kms_encrypted_password is set.
	// +mapType=granular
	KMSEncryptionContext map[string]*string `json:"kmsEncryptionContext,omitempty" tf:"kms_encryption_context,omitempty"`

	// The status of Tair (Redis OSS-Compatible) And Memcache (KVStore) Account.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AccountParameters struct {

	// The name of the account. The name must meet the following requirements:
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The password of the account. The password must be 8 to 32 characters in length. It must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include !@ # $ % ^ & * ( ) _ + - =. You have to specify one of account_password and kms_encrypted_password fields.
	// +kubebuilder:validation:Optional
	AccountPasswordSecretRef *v1.SecretKeySelector `json:"accountPasswordSecretRef,omitempty" tf:"-"`

	// The privilege of account access database. Default value: RoleReadWrite
	// +kubebuilder:validation:Optional
	AccountPrivilege *string `json:"accountPrivilege,omitempty" tf:"account_privilege,omitempty"`

	// Privilege type of account.
	// +kubebuilder:validation:Optional
	AccountType *string `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// Database description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Id of instance in which account belongs (The engine version of instance must be 4.0 or 4.0+).
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/tair/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in tair to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in tair to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// An KMS encrypts password used to a Tair (Redis OSS-Compatible) And Memcache (KVStore) account. If the account_password is filled in, this field will be ignored.
	// +kubebuilder:validation:Optional
	KMSEncryptedPassword *string `json:"kmsEncryptedPassword,omitempty" tf:"kms_encrypted_password,omitempty"`

	// An KMS encryption context used to decrypt kms_encrypted_password before creating or updating a Tair (Redis OSS-Compatible) And Memcache (KVStore) account with kms_encrypted_password. See Encryption Context. It is valid when kms_encrypted_password is set.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	KMSEncryptionContext map[string]*string `json:"kmsEncryptionContext,omitempty" tf:"kms_encryption_context,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// AccountSpec defines the desired state of Account
type AccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountInitParameters `json:"initProvider,omitempty"`
}

// AccountStatus defines the observed state of Account.
type AccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Account is the Schema for the Accounts API. Provides a Alicloud Tair (Redis OSS-Compatible) And Memcache (KVStore) Account resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Account struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountName) || (has(self.initProvider) && has(self.initProvider.accountName))",message="spec.forProvider.accountName is a required parameter"
	Spec   AccountSpec   `json:"spec"`
	Status AccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountList contains a list of Accounts
type AccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Account `json:"items"`
}

// Repository type metadata.
var (
	Account_Kind             = "Account"
	Account_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Account_Kind}.String()
	Account_KindAPIVersion   = Account_Kind + "." + CRDGroupVersion.String()
	Account_GroupVersionKind = CRDGroupVersion.WithKind(Account_Kind)
)

func init() {
	SchemeBuilder.Register(&Account{}, &AccountList{})
}
