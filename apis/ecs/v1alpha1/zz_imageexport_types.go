// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageExportInitParameters struct {

	// The source image ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Image
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`

	// Save the exported OSS bucket.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	OssBucket *string `json:"ossBucket,omitempty" tf:"oss_bucket,omitempty"`

	// Reference to a Bucket in oss to populate ossBucket.
	// +kubebuilder:validation:Optional
	OssBucketRef *v1.Reference `json:"ossBucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate ossBucket.
	// +kubebuilder:validation:Optional
	OssBucketSelector *v1.Selector `json:"ossBucketSelector,omitempty" tf:"-"`

	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix *string `json:"ossPrefix,omitempty" tf:"oss_prefix,omitempty"`
}

type ImageExportObservation struct {

	// ID of the image.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The source image ID.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Save the exported OSS bucket.
	OssBucket *string `json:"ossBucket,omitempty" tf:"oss_bucket,omitempty"`

	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix *string `json:"ossPrefix,omitempty" tf:"oss_prefix,omitempty"`
}

type ImageExportParameters struct {

	// The source image ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Image
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`

	// Save the exported OSS bucket.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	OssBucket *string `json:"ossBucket,omitempty" tf:"oss_bucket,omitempty"`

	// Reference to a Bucket in oss to populate ossBucket.
	// +kubebuilder:validation:Optional
	OssBucketRef *v1.Reference `json:"ossBucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate ossBucket.
	// +kubebuilder:validation:Optional
	OssBucketSelector *v1.Selector `json:"ossBucketSelector,omitempty" tf:"-"`

	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	// +kubebuilder:validation:Optional
	OssPrefix *string `json:"ossPrefix,omitempty" tf:"oss_prefix,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// ImageExportSpec defines the desired state of ImageExport
type ImageExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageExportParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageExportInitParameters `json:"initProvider,omitempty"`
}

// ImageExportStatus defines the observed state of ImageExport.
type ImageExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ImageExport is the Schema for the ImageExports API. Provides an ECS image export resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type ImageExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageExportSpec   `json:"spec"`
	Status            ImageExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageExportList contains a list of ImageExports
type ImageExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageExport `json:"items"`
}

// Repository type metadata.
var (
	ImageExport_Kind             = "ImageExport"
	ImageExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageExport_Kind}.String()
	ImageExport_KindAPIVersion   = ImageExport_Kind + "." + CRDGroupVersion.String()
	ImageExport_GroupVersionKind = CRDGroupVersion.WithKind(ImageExport_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageExport{}, &ImageExportList{})
}
