// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageCopyInitParameters struct {
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates whether to encrypt the image.
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// Indicates whether to force delete the custom image, Default is false.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// Key ID used to encrypt the image.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/kms/v1alpha1.Key
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	KMSKeyIDRef *v1.Reference `json:"kmsKeyIdRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	KMSKeyIDSelector *v1.Selector `json:"kmsKeyIdSelector,omitempty" tf:"-"`

	// The source image ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Image
	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id,omitempty"`

	// Reference to a Image in ecs to populate sourceImageId.
	// +kubebuilder:validation:Optional
	SourceImageIDRef *v1.Reference `json:"sourceImageIdRef,omitempty" tf:"-"`

	// Selector for a Image in ecs to populate sourceImageId.
	// +kubebuilder:validation:Optional
	SourceImageIDSelector *v1.Selector `json:"sourceImageIdSelector,omitempty" tf:"-"`

	// The ID of the region to which the source custom image belongs. You can call DescribeRegions to view the latest regions of Alibaba Cloud.
	SourceRegionID *string `json:"sourceRegionId,omitempty" tf:"source_region_id,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageCopyObservation struct {
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates whether to encrypt the image.
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// Indicates whether to force delete the custom image, Default is false.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// ID of the image.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// Key ID used to encrypt the image.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// The source image ID.
	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id,omitempty"`

	// The ID of the region to which the source custom image belongs. You can call DescribeRegions to view the latest regions of Alibaba Cloud.
	SourceRegionID *string `json:"sourceRegionId,omitempty" tf:"source_region_id,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageCopyParameters struct {

	// +kubebuilder:validation:Optional
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates whether to encrypt the image.
	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// Indicates whether to force delete the custom image, Default is false.
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// Key ID used to encrypt the image.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/kms/v1alpha1.Key
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	KMSKeyIDRef *v1.Reference `json:"kmsKeyIdRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	KMSKeyIDSelector *v1.Selector `json:"kmsKeyIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The source image ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Image
	// +kubebuilder:validation:Optional
	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id,omitempty"`

	// Reference to a Image in ecs to populate sourceImageId.
	// +kubebuilder:validation:Optional
	SourceImageIDRef *v1.Reference `json:"sourceImageIdRef,omitempty" tf:"-"`

	// Selector for a Image in ecs to populate sourceImageId.
	// +kubebuilder:validation:Optional
	SourceImageIDSelector *v1.Selector `json:"sourceImageIdSelector,omitempty" tf:"-"`

	// The ID of the region to which the source custom image belongs. You can call DescribeRegions to view the latest regions of Alibaba Cloud.
	// +kubebuilder:validation:Optional
	SourceRegionID *string `json:"sourceRegionId,omitempty" tf:"source_region_id,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ImageCopySpec defines the desired state of ImageCopy
type ImageCopySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageCopyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageCopyInitParameters `json:"initProvider,omitempty"`
}

// ImageCopyStatus defines the observed state of ImageCopy.
type ImageCopyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageCopyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ImageCopy is the Schema for the ImageCopys API. Provides an ECS image copy resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type ImageCopy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceRegionId) || (has(self.initProvider) && has(self.initProvider.sourceRegionId))",message="spec.forProvider.sourceRegionId is a required parameter"
	Spec   ImageCopySpec   `json:"spec"`
	Status ImageCopyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageCopyList contains a list of ImageCopys
type ImageCopyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageCopy `json:"items"`
}

// Repository type metadata.
var (
	ImageCopy_Kind             = "ImageCopy"
	ImageCopy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageCopy_Kind}.String()
	ImageCopy_KindAPIVersion   = ImageCopy_Kind + "." + CRDGroupVersion.String()
	ImageCopy_GroupVersionKind = CRDGroupVersion.WithKind(ImageCopy_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageCopy{}, &ImageCopyList{})
}
