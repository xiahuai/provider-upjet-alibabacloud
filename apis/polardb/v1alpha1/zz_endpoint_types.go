// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointInitParameters struct {

	// Whether the new node automatically joins the default cluster address. Valid values are Enable, Disable. When creating a new custom endpoint, default to Disable.
	AutoAddNewNodes *string `json:"autoAddNewNodes,omitempty" tf:"auto_add_new_nodes,omitempty"`

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// The Id of cluster that can run database.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/polardb/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	DBClusterID *string `json:"dbClusterId,omitempty" tf:"db_cluster_id,omitempty"`

	// Reference to a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDRef *v1.Reference `json:"dbClusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDSelector *v1.Selector `json:"dbClusterIdSelector,omitempty" tf:"-"`

	// The name of the endpoint.
	DBEndpointDescription *string `json:"dbEndpointDescription,omitempty" tf:"db_endpoint_description,omitempty"`

	// The advanced settings of the endpoint of Apsara PolarDB clusters are in JSON format. Including the settings of consistency level, transaction splitting, connection pool, and offload reads from primary node. For more details, see the description of EndpointConfig in the Request parameters table for details.
	// +mapType=granular
	EndpointConfig map[string]*string `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// Type of the endpoint. Before v1.121.0, it only can be Custom. since v1.121.0, Custom, Cluster, Primary are valid, default to Custom. However when creating a new endpoint, it also only can be Custom.
	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type,omitempty"`

	// The network type of the endpoint address.
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Node id list for endpoint configuration. At least 2 nodes if specified, or if the cluster has more than 3 nodes, read-only endpoint is allowed to mount only one node. Default is all nodes.
	// +listType=set
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Read or write mode. Valid values are ReadWrite, ReadOnly. When creating a new custom endpoint, default to ReadOnly.
	ReadWriteMode *string `json:"readWriteMode,omitempty" tf:"read_write_mode,omitempty"`

	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: Enable,Disable.
	SSLAutoRotate *string `json:"sslAutoRotate,omitempty" tf:"ssl_auto_rotate,omitempty"`

	// Specifies how to modify the SSL encryption status. Valid values: Disable, Enable, Update.
	SSLEnabled *string `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`
}

type EndpointObservation struct {

	// Whether the new node automatically joins the default cluster address. Valid values are Enable, Disable. When creating a new custom endpoint, default to Disable.
	AutoAddNewNodes *string `json:"autoAddNewNodes,omitempty" tf:"auto_add_new_nodes,omitempty"`

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// The Id of cluster that can run database.
	DBClusterID *string `json:"dbClusterId,omitempty" tf:"db_cluster_id,omitempty"`

	// The name of the endpoint.
	DBEndpointDescription *string `json:"dbEndpointDescription,omitempty" tf:"db_endpoint_description,omitempty"`

	// (Available since v1.161.0) The ID of the cluster endpoint.
	DBEndpointID *string `json:"dbEndpointId,omitempty" tf:"db_endpoint_id,omitempty"`

	// The advanced settings of the endpoint of Apsara PolarDB clusters are in JSON format. Including the settings of consistency level, transaction splitting, connection pool, and offload reads from primary node. For more details, see the description of EndpointConfig in the Request parameters table for details.
	// +mapType=granular
	EndpointConfig map[string]*string `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// Type of the endpoint. Before v1.121.0, it only can be Custom. since v1.121.0, Custom, Cluster, Primary are valid, default to Custom. However when creating a new endpoint, it also only can be Custom.
	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type,omitempty"`

	// The current instance connection resource ID. Composed of instance ID and connection string with format <db_cluster_id>:<db_endpoint_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The network type of the endpoint address.
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Node id list for endpoint configuration. At least 2 nodes if specified, or if the cluster has more than 3 nodes, read-only endpoint is allowed to mount only one node. Default is all nodes.
	// +listType=set
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Read or write mode. Valid values are ReadWrite, ReadOnly. When creating a new custom endpoint, default to ReadOnly.
	ReadWriteMode *string `json:"readWriteMode,omitempty" tf:"read_write_mode,omitempty"`

	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: Enable,Disable.
	SSLAutoRotate *string `json:"sslAutoRotate,omitempty" tf:"ssl_auto_rotate,omitempty"`

	// (Available since v1.132.0) Specifies SSL certificate download link.
	// NOTE: For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see Configure SSL encryption.
	// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
	SSLCertificateURL *string `json:"sslCertificateUrl,omitempty" tf:"ssl_certificate_url,omitempty"`

	// (Available since v1.121.0) The SSL connection string.
	SSLConnectionString *string `json:"sslConnectionString,omitempty" tf:"ssl_connection_string,omitempty"`

	// Specifies how to modify the SSL encryption status. Valid values: Disable, Enable, Update.
	SSLEnabled *string `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// (Available since v1.121.0) The time when the SSL certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	SSLExpireTime *string `json:"sslExpireTime,omitempty" tf:"ssl_expire_time,omitempty"`
}

type EndpointParameters struct {

	// Whether the new node automatically joins the default cluster address. Valid values are Enable, Disable. When creating a new custom endpoint, default to Disable.
	// +kubebuilder:validation:Optional
	AutoAddNewNodes *string `json:"autoAddNewNodes,omitempty" tf:"auto_add_new_nodes,omitempty"`

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	// +kubebuilder:validation:Optional
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// The Id of cluster that can run database.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/polardb/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	// +kubebuilder:validation:Optional
	DBClusterID *string `json:"dbClusterId,omitempty" tf:"db_cluster_id,omitempty"`

	// Reference to a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDRef *v1.Reference `json:"dbClusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDSelector *v1.Selector `json:"dbClusterIdSelector,omitempty" tf:"-"`

	// The name of the endpoint.
	// +kubebuilder:validation:Optional
	DBEndpointDescription *string `json:"dbEndpointDescription,omitempty" tf:"db_endpoint_description,omitempty"`

	// The advanced settings of the endpoint of Apsara PolarDB clusters are in JSON format. Including the settings of consistency level, transaction splitting, connection pool, and offload reads from primary node. For more details, see the description of EndpointConfig in the Request parameters table for details.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	EndpointConfig map[string]*string `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// Type of the endpoint. Before v1.121.0, it only can be Custom. since v1.121.0, Custom, Cluster, Primary are valid, default to Custom. However when creating a new endpoint, it also only can be Custom.
	// +kubebuilder:validation:Optional
	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type,omitempty"`

	// The network type of the endpoint address.
	// +kubebuilder:validation:Optional
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Node id list for endpoint configuration. At least 2 nodes if specified, or if the cluster has more than 3 nodes, read-only endpoint is allowed to mount only one node. Default is all nodes.
	// +kubebuilder:validation:Optional
	// +listType=set
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Port of the specified endpoint. Valid values: 3000 to 5999.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Read or write mode. Valid values are ReadWrite, ReadOnly. When creating a new custom endpoint, default to ReadOnly.
	// +kubebuilder:validation:Optional
	ReadWriteMode *string `json:"readWriteMode,omitempty" tf:"read_write_mode,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: Enable,Disable.
	// +kubebuilder:validation:Optional
	SSLAutoRotate *string `json:"sslAutoRotate,omitempty" tf:"ssl_auto_rotate,omitempty"`

	// Specifies how to modify the SSL encryption status. Valid values: Disable, Enable, Update.
	// +kubebuilder:validation:Optional
	SSLEnabled *string `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointInitParameters `json:"initProvider,omitempty"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Endpoint is the Schema for the Endpoints API. Provides a PolarDB instance endpoint resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSpec   `json:"spec"`
	Status            EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	Endpoint_Kind             = "Endpoint"
	Endpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Endpoint_Kind}.String()
	Endpoint_KindAPIVersion   = Endpoint_Kind + "." + CRDGroupVersion.String()
	Endpoint_GroupVersionKind = CRDGroupVersion.WithKind(Endpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
