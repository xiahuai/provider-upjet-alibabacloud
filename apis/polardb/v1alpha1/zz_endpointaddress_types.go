// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointAddressInitParameters struct {

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// The Id of cluster that can run database.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/polardb/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	DBClusterID *string `json:"dbClusterId,omitempty" tf:"db_cluster_id,omitempty"`

	// Reference to a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDRef *v1.Reference `json:"dbClusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDSelector *v1.Selector `json:"dbClusterIdSelector,omitempty" tf:"-"`

	// The Id of endpoint that can run database.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/polardb/v1alpha1.Endpoint
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.DBEndpointIdExtractor()
	DBEndpointID *string `json:"dbEndpointId,omitempty" tf:"db_endpoint_id,omitempty"`

	// Reference to a Endpoint in polardb to populate dbEndpointId.
	// +kubebuilder:validation:Optional
	DBEndpointIDRef *v1.Reference `json:"dbEndpointIdRef,omitempty" tf:"-"`

	// Selector for a Endpoint in polardb to populate dbEndpointId.
	// +kubebuilder:validation:Optional
	DBEndpointIDSelector *v1.Selector `json:"dbEndpointIdSelector,omitempty" tf:"-"`

	// Internet connection net type. Valid value: Public. Default to Public. Currently supported only Public.
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`
}

type EndpointAddressObservation struct {

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// Connection cluster or endpoint string.
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	// The Id of cluster that can run database.
	DBClusterID *string `json:"dbClusterId,omitempty" tf:"db_cluster_id,omitempty"`

	// The Id of endpoint that can run database.
	DBEndpointID *string `json:"dbEndpointId,omitempty" tf:"db_endpoint_id,omitempty"`

	// The current instance connection resource ID. Composed of instance ID and connection string with format <db_cluster_id>:<db_endpoint_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ip address of connection string.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Internet connection net type. Valid value: Public. Default to Public. Currently supported only Public.
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`
}

type EndpointAddressParameters struct {

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	// +kubebuilder:validation:Optional
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// The Id of cluster that can run database.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/polardb/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	// +kubebuilder:validation:Optional
	DBClusterID *string `json:"dbClusterId,omitempty" tf:"db_cluster_id,omitempty"`

	// Reference to a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDRef *v1.Reference `json:"dbClusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in polardb to populate dbClusterId.
	// +kubebuilder:validation:Optional
	DBClusterIDSelector *v1.Selector `json:"dbClusterIdSelector,omitempty" tf:"-"`

	// The Id of endpoint that can run database.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/polardb/v1alpha1.Endpoint
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.DBEndpointIdExtractor()
	// +kubebuilder:validation:Optional
	DBEndpointID *string `json:"dbEndpointId,omitempty" tf:"db_endpoint_id,omitempty"`

	// Reference to a Endpoint in polardb to populate dbEndpointId.
	// +kubebuilder:validation:Optional
	DBEndpointIDRef *v1.Reference `json:"dbEndpointIdRef,omitempty" tf:"-"`

	// Selector for a Endpoint in polardb to populate dbEndpointId.
	// +kubebuilder:validation:Optional
	DBEndpointIDSelector *v1.Selector `json:"dbEndpointIdSelector,omitempty" tf:"-"`

	// Internet connection net type. Valid value: Public. Default to Public. Currently supported only Public.
	// +kubebuilder:validation:Optional
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Port of the specified endpoint. Valid values: 3000 to 5999.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// EndpointAddressSpec defines the desired state of EndpointAddress
type EndpointAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointAddressParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointAddressInitParameters `json:"initProvider,omitempty"`
}

// EndpointAddressStatus defines the observed state of EndpointAddress.
type EndpointAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EndpointAddress is the Schema for the EndpointAddresss API. Provides a PolarDB instance endpoint resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type EndpointAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointAddressSpec   `json:"spec"`
	Status            EndpointAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointAddressList contains a list of EndpointAddresss
type EndpointAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointAddress `json:"items"`
}

// Repository type metadata.
var (
	EndpointAddress_Kind             = "EndpointAddress"
	EndpointAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointAddress_Kind}.String()
	EndpointAddress_KindAPIVersion   = EndpointAddress_Kind + "." + CRDGroupVersion.String()
	EndpointAddress_GroupVersionKind = CRDGroupVersion.WithKind(EndpointAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointAddress{}, &EndpointAddressList{})
}
