// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha12 "github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1"
	v1alpha13 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	common "github.com/crossplane-contrib/provider-alibabacloud/config/common"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Alias.
func (mg *Alias) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VersionID),
		Extract:      common.Fcv3FunctionVersionIdExtractor(),
		Reference:    mg.Spec.ForProvider.VersionIDRef,
		Selector:     mg.Spec.ForProvider.VersionIDSelector,
		To: reference.To{
			List:    &FunctionVersionList{},
			Managed: &FunctionVersion{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VersionID")
	}
	mg.Spec.ForProvider.VersionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VersionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VersionID),
		Extract:      common.Fcv3FunctionVersionIdExtractor(),
		Reference:    mg.Spec.InitProvider.VersionIDRef,
		Selector:     mg.Spec.InitProvider.VersionIDSelector,
		To: reference.To{
			List:    &FunctionVersionList{},
			Managed: &FunctionVersion{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VersionID")
	}
	mg.Spec.InitProvider.VersionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VersionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AsyncInvokeConfig.
func (mg *AsyncInvokeConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DestinationConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DestinationConfig[i3].OnFailure); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationConfig[i3].OnFailure[i4].Destination),
				Extract:      common.Fcv3FunctionArnExtractor(),
				Reference:    mg.Spec.ForProvider.DestinationConfig[i3].OnFailure[i4].DestinationRef,
				Selector:     mg.Spec.ForProvider.DestinationConfig[i3].OnFailure[i4].DestinationSelector,
				To: reference.To{
					List:    &FunctionList{},
					Managed: &Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DestinationConfig[i3].OnFailure[i4].Destination")
			}
			mg.Spec.ForProvider.DestinationConfig[i3].OnFailure[i4].Destination = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DestinationConfig[i3].OnFailure[i4].DestinationRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.DestinationConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess[i4].Destination),
				Extract:      common.Fcv3FunctionArnExtractor(),
				Reference:    mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess[i4].DestinationRef,
				Selector:     mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess[i4].DestinationSelector,
				To: reference.To{
					List:    &FunctionList{},
					Managed: &Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess[i4].Destination")
			}
			mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess[i4].Destination = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DestinationConfig[i3].OnSuccess[i4].DestinationRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.DestinationConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DestinationConfig[i3].OnFailure); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DestinationConfig[i3].OnFailure[i4].Destination),
				Extract:      common.Fcv3FunctionArnExtractor(),
				Reference:    mg.Spec.InitProvider.DestinationConfig[i3].OnFailure[i4].DestinationRef,
				Selector:     mg.Spec.InitProvider.DestinationConfig[i3].OnFailure[i4].DestinationSelector,
				To: reference.To{
					List:    &FunctionList{},
					Managed: &Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DestinationConfig[i3].OnFailure[i4].Destination")
			}
			mg.Spec.InitProvider.DestinationConfig[i3].OnFailure[i4].Destination = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DestinationConfig[i3].OnFailure[i4].DestinationRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DestinationConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess[i4].Destination),
				Extract:      common.Fcv3FunctionArnExtractor(),
				Reference:    mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess[i4].DestinationRef,
				Selector:     mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess[i4].DestinationSelector,
				To: reference.To{
					List:    &FunctionList{},
					Managed: &Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess[i4].Destination")
			}
			mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess[i4].Destination = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DestinationConfig[i3].OnSuccess[i4].DestinationRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ConcurrencyConfig.
func (mg *ConcurrencyConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CustomDomain.
func (mg *CustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RouteConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RouteConfig[i3].Routes); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteConfig[i3].Routes[i4].FunctionName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.RouteConfig[i3].Routes[i4].FunctionNameRef,
				Selector:     mg.Spec.ForProvider.RouteConfig[i3].Routes[i4].FunctionNameSelector,
				To: reference.To{
					List:    &FunctionList{},
					Managed: &Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RouteConfig[i3].Routes[i4].FunctionName")
			}
			mg.Spec.ForProvider.RouteConfig[i3].Routes[i4].FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RouteConfig[i3].Routes[i4].FunctionNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RouteConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RouteConfig[i3].Routes); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouteConfig[i3].Routes[i4].FunctionName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.RouteConfig[i3].Routes[i4].FunctionNameRef,
				Selector:     mg.Spec.InitProvider.RouteConfig[i3].Routes[i4].FunctionNameSelector,
				To: reference.To{
					List:    &FunctionList{},
					Managed: &Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RouteConfig[i3].Routes[i4].FunctionName")
			}
			mg.Spec.InitProvider.RouteConfig[i3].Routes[i4].FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RouteConfig[i3].Routes[i4].FunctionNameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Function.
func (mg *Function) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Code[i3].OssBucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Code[i3].OssBucketNameRef,
			Selector:     mg.Spec.ForProvider.Code[i3].OssBucketNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Code[i3].OssBucketName")
		}
		mg.Spec.ForProvider.Code[i3].OssBucketName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Code[i3].OssBucketNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Code[i3].OssObjectName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Code[i3].OssObjectNameRef,
			Selector:     mg.Spec.ForProvider.Code[i3].OssObjectNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketObjectList{},
				Managed: &v1alpha1.BucketObject{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Code[i3].OssObjectName")
		}
		mg.Spec.ForProvider.Code[i3].OssObjectName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Code[i3].OssObjectNameRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Layers),
		Extract:       common.Fcv3LayerVersionArnExtractor(),
		References:    mg.Spec.ForProvider.LayerRefs,
		Selector:      mg.Spec.ForProvider.LayerSelector,
		To: reference.To{
			List:    &LayerVersionList{},
			Managed: &LayerVersion{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Layers")
	}
	mg.Spec.ForProvider.Layers = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.LayerRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Role),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RoleRef,
		Selector:     mg.Spec.ForProvider.RoleSelector,
		To: reference.To{
			List:    &v1alpha11.RoleList{},
			Managed: &v1alpha11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Role")
	}
	mg.Spec.ForProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.VPCConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCConfig[i3].SecurityGroupID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VPCConfig[i3].SecurityGroupIDRef,
			Selector:     mg.Spec.ForProvider.VPCConfig[i3].SecurityGroupIDSelector,
			To: reference.To{
				List:    &v1alpha12.SecurityGroupList{},
				Managed: &v1alpha12.SecurityGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfig[i3].SecurityGroupID")
		}
		mg.Spec.ForProvider.VPCConfig[i3].SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VPCConfig[i3].SecurityGroupIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VPCConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCConfig[i3].VPCID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VPCConfig[i3].VPCIDRef,
			Selector:     mg.Spec.ForProvider.VPCConfig[i3].VPCIDSelector,
			To: reference.To{
				List:    &v1alpha13.VPCList{},
				Managed: &v1alpha13.VPC{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfig[i3].VPCID")
		}
		mg.Spec.ForProvider.VPCConfig[i3].VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VPCConfig[i3].VPCIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VPCConfig); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCConfig[i3].VswitchIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.VPCConfig[i3].VSwitchIDRefs,
			Selector:      mg.Spec.ForProvider.VPCConfig[i3].VSwitchIDSelector,
			To: reference.To{
				List:    &v1alpha13.VswitchList{},
				Managed: &v1alpha13.Vswitch{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfig[i3].VswitchIds")
		}
		mg.Spec.ForProvider.VPCConfig[i3].VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCConfig[i3].VSwitchIDRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Code[i3].OssBucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Code[i3].OssBucketNameRef,
			Selector:     mg.Spec.InitProvider.Code[i3].OssBucketNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Code[i3].OssBucketName")
		}
		mg.Spec.InitProvider.Code[i3].OssBucketName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Code[i3].OssBucketNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Code[i3].OssObjectName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Code[i3].OssObjectNameRef,
			Selector:     mg.Spec.InitProvider.Code[i3].OssObjectNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketObjectList{},
				Managed: &v1alpha1.BucketObject{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Code[i3].OssObjectName")
		}
		mg.Spec.InitProvider.Code[i3].OssObjectName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Code[i3].OssObjectNameRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Layers),
		Extract:       common.Fcv3LayerVersionArnExtractor(),
		References:    mg.Spec.InitProvider.LayerRefs,
		Selector:      mg.Spec.InitProvider.LayerSelector,
		To: reference.To{
			List:    &LayerVersionList{},
			Managed: &LayerVersion{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Layers")
	}
	mg.Spec.InitProvider.Layers = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.LayerRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Role),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.RoleRef,
		Selector:     mg.Spec.InitProvider.RoleSelector,
		To: reference.To{
			List:    &v1alpha11.RoleList{},
			Managed: &v1alpha11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Role")
	}
	mg.Spec.InitProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.VPCConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCConfig[i3].SecurityGroupID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VPCConfig[i3].SecurityGroupIDRef,
			Selector:     mg.Spec.InitProvider.VPCConfig[i3].SecurityGroupIDSelector,
			To: reference.To{
				List:    &v1alpha12.SecurityGroupList{},
				Managed: &v1alpha12.SecurityGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfig[i3].SecurityGroupID")
		}
		mg.Spec.InitProvider.VPCConfig[i3].SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VPCConfig[i3].SecurityGroupIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VPCConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCConfig[i3].VPCID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VPCConfig[i3].VPCIDRef,
			Selector:     mg.Spec.InitProvider.VPCConfig[i3].VPCIDSelector,
			To: reference.To{
				List:    &v1alpha13.VPCList{},
				Managed: &v1alpha13.VPC{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfig[i3].VPCID")
		}
		mg.Spec.InitProvider.VPCConfig[i3].VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VPCConfig[i3].VPCIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VPCConfig); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCConfig[i3].VswitchIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.VPCConfig[i3].VSwitchIDRefs,
			Selector:      mg.Spec.InitProvider.VPCConfig[i3].VSwitchIDSelector,
			To: reference.To{
				List:    &v1alpha13.VswitchList{},
				Managed: &v1alpha13.Vswitch{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfig[i3].VswitchIds")
		}
		mg.Spec.InitProvider.VPCConfig[i3].VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCConfig[i3].VSwitchIDRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this FunctionVersion.
func (mg *FunctionVersion) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LayerVersion.
func (mg *LayerVersion) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Code[i3].OssBucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Code[i3].OssBucketNameRef,
			Selector:     mg.Spec.ForProvider.Code[i3].OssBucketNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Code[i3].OssBucketName")
		}
		mg.Spec.ForProvider.Code[i3].OssBucketName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Code[i3].OssBucketNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Code[i3].OssObjectName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Code[i3].OssObjectNameRef,
			Selector:     mg.Spec.ForProvider.Code[i3].OssObjectNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketObjectList{},
				Managed: &v1alpha1.BucketObject{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Code[i3].OssObjectName")
		}
		mg.Spec.ForProvider.Code[i3].OssObjectName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Code[i3].OssObjectNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Code[i3].OssBucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Code[i3].OssBucketNameRef,
			Selector:     mg.Spec.InitProvider.Code[i3].OssBucketNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Code[i3].OssBucketName")
		}
		mg.Spec.InitProvider.Code[i3].OssBucketName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Code[i3].OssBucketNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Code); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Code[i3].OssObjectName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Code[i3].OssObjectNameRef,
			Selector:     mg.Spec.InitProvider.Code[i3].OssObjectNameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketObjectList{},
				Managed: &v1alpha1.BucketObject{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Code[i3].OssObjectName")
		}
		mg.Spec.InitProvider.Code[i3].OssObjectName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Code[i3].OssObjectNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ProvisionConfig.
func (mg *ProvisionConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Trigger.
func (mg *Trigger) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InvocationRole),
		Extract:      common.RoleArnExtractor(),
		Reference:    mg.Spec.ForProvider.InvocationRoleRef,
		Selector:     mg.Spec.ForProvider.InvocationRoleSelector,
		To: reference.To{
			List:    &v1alpha11.RoleList{},
			Managed: &v1alpha11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InvocationRole")
	}
	mg.Spec.ForProvider.InvocationRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InvocationRoleRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InvocationRole),
		Extract:      common.RoleArnExtractor(),
		Reference:    mg.Spec.InitProvider.InvocationRoleRef,
		Selector:     mg.Spec.InitProvider.InvocationRoleSelector,
		To: reference.To{
			List:    &v1alpha11.RoleList{},
			Managed: &v1alpha11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InvocationRole")
	}
	mg.Spec.InitProvider.InvocationRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InvocationRoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VpcBinding.
func (mg *VpcBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FunctionNameRef,
		Selector:     mg.Spec.ForProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FunctionName")
	}
	mg.Spec.ForProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha13.VPCList{},
			Managed: &v1alpha13.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FunctionName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FunctionNameRef,
		Selector:     mg.Spec.InitProvider.FunctionNameSelector,
		To: reference.To{
			List:    &FunctionList{},
			Managed: &Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FunctionName")
	}
	mg.Spec.InitProvider.FunctionName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FunctionNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha13.VPCList{},
			Managed: &v1alpha13.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}
