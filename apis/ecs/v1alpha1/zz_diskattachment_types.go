// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskAttachmentInitParameters struct {

	// Whether to mount as a system disk. Default to: false.
	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	// Indicates whether the disk is released together with the instance. Default to: false.
	DeleteWithInstance *bool `json:"deleteWithInstance,omitempty" tf:"delete_with_instance,omitempty"`

	// ID of the Disk to be attached.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Disk
	DiskID *string `json:"diskId,omitempty" tf:"disk_id,omitempty"`

	// Reference to a Disk in ecs to populate diskId.
	// +kubebuilder:validation:Optional
	DiskIDRef *v1.Reference `json:"diskIdRef,omitempty" tf:"-"`

	// Selector for a Disk in ecs to populate diskId.
	// +kubebuilder:validation:Optional
	DiskIDSelector *v1.Selector `json:"diskIdSelector,omitempty" tf:"-"`

	// ID of the Instance to attach to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Instance
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The name of key pair
	KeyPairName *string `json:"keyPairName,omitempty" tf:"key_pair_name,omitempty"`

	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`
}

type DiskAttachmentObservation struct {

	// Whether to mount as a system disk. Default to: false.
	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	// Indicates whether the disk is released together with the instance. Default to: false.
	DeleteWithInstance *bool `json:"deleteWithInstance,omitempty" tf:"delete_with_instance,omitempty"`

	// The name of the cloud disk device.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// ID of the Disk to be attached.
	DiskID *string `json:"diskId,omitempty" tf:"disk_id,omitempty"`

	// The Disk Attachment ID and it formats as <disk_id>:<instance_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the Instance to attach to.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of key pair
	KeyPairName *string `json:"keyPairName,omitempty" tf:"key_pair_name,omitempty"`

	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`
}

type DiskAttachmentParameters struct {

	// Whether to mount as a system disk. Default to: false.
	// +kubebuilder:validation:Optional
	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	// Indicates whether the disk is released together with the instance. Default to: false.
	// +kubebuilder:validation:Optional
	DeleteWithInstance *bool `json:"deleteWithInstance,omitempty" tf:"delete_with_instance,omitempty"`

	// ID of the Disk to be attached.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Disk
	// +kubebuilder:validation:Optional
	DiskID *string `json:"diskId,omitempty" tf:"disk_id,omitempty"`

	// Reference to a Disk in ecs to populate diskId.
	// +kubebuilder:validation:Optional
	DiskIDRef *v1.Reference `json:"diskIdRef,omitempty" tf:"-"`

	// Selector for a Disk in ecs to populate diskId.
	// +kubebuilder:validation:Optional
	DiskIDSelector *v1.Selector `json:"diskIdSelector,omitempty" tf:"-"`

	// ID of the Instance to attach to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The name of key pair
	// +kubebuilder:validation:Optional
	KeyPairName *string `json:"keyPairName,omitempty" tf:"key_pair_name,omitempty"`

	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// DiskAttachmentSpec defines the desired state of DiskAttachment
type DiskAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DiskAttachmentInitParameters `json:"initProvider,omitempty"`
}

// DiskAttachmentStatus defines the observed state of DiskAttachment.
type DiskAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DiskAttachment is the Schema for the DiskAttachments API. Provides a ECS Disk Attachment resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type DiskAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskAttachmentSpec   `json:"spec"`
	Status            DiskAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskAttachmentList contains a list of DiskAttachments
type DiskAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskAttachment `json:"items"`
}

// Repository type metadata.
var (
	DiskAttachment_Kind             = "DiskAttachment"
	DiskAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskAttachment_Kind}.String()
	DiskAttachment_KindAPIVersion   = DiskAttachment_Kind + "." + CRDGroupVersion.String()
	DiskAttachment_GroupVersionKind = CRDGroupVersion.WithKind(DiskAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskAttachment{}, &DiskAttachmentList{})
}
