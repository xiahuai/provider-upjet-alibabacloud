// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Alias.
func (mg *Alias) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KeyIDRef,
		Selector:     mg.Spec.ForProvider.KeyIDSelector,
		To: reference.To{
			List:    &KeyList{},
			Managed: &Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyID")
	}
	mg.Spec.ForProvider.KeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.KeyIDRef,
		Selector:     mg.Spec.InitProvider.KeyIDSelector,
		To: reference.To{
			List:    &KeyList{},
			Managed: &Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyID")
	}
	mg.Spec.InitProvider.KeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BindVpcs); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BindVpcs[i3].VPCID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BindVpcs[i3].VPCIDRef,
			Selector:     mg.Spec.ForProvider.BindVpcs[i3].VPCIDSelector,
			To: reference.To{
				List:    &v1alpha1.VPCList{},
				Managed: &v1alpha1.VPC{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BindVpcs[i3].VPCID")
		}
		mg.Spec.ForProvider.BindVpcs[i3].VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BindVpcs[i3].VPCIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.BindVpcs); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BindVpcs[i3].VswitchID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BindVpcs[i3].VswitchIDRef,
			Selector:     mg.Spec.ForProvider.BindVpcs[i3].VswitchIDSelector,
			To: reference.To{
				List:    &v1alpha1.VswitchList{},
				Managed: &v1alpha1.Vswitch{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BindVpcs[i3].VswitchID")
		}
		mg.Spec.ForProvider.BindVpcs[i3].VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BindVpcs[i3].VswitchIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha1.VPCList{},
			Managed: &v1alpha1.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VswitchIdsRefs,
		Selector:      mg.Spec.ForProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchIds")
	}
	mg.Spec.ForProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ZoneIds),
		Extract:       resource.ExtractParamPath("zone_id", false),
		References:    mg.Spec.ForProvider.ZoneIdsRefs,
		Selector:      mg.Spec.ForProvider.ZoneIdsSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ZoneIds")
	}
	mg.Spec.ForProvider.ZoneIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ZoneIdsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.BindVpcs); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BindVpcs[i3].VPCID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BindVpcs[i3].VPCIDRef,
			Selector:     mg.Spec.InitProvider.BindVpcs[i3].VPCIDSelector,
			To: reference.To{
				List:    &v1alpha1.VPCList{},
				Managed: &v1alpha1.VPC{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BindVpcs[i3].VPCID")
		}
		mg.Spec.InitProvider.BindVpcs[i3].VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BindVpcs[i3].VPCIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BindVpcs); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BindVpcs[i3].VswitchID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BindVpcs[i3].VswitchIDRef,
			Selector:     mg.Spec.InitProvider.BindVpcs[i3].VswitchIDSelector,
			To: reference.To{
				List:    &v1alpha1.VswitchList{},
				Managed: &v1alpha1.Vswitch{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BindVpcs[i3].VswitchID")
		}
		mg.Spec.InitProvider.BindVpcs[i3].VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BindVpcs[i3].VswitchIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha1.VPCList{},
			Managed: &v1alpha1.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.VswitchIdsRefs,
		Selector:      mg.Spec.InitProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchIds")
	}
	mg.Spec.InitProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ZoneIds),
		Extract:       resource.ExtractParamPath("zone_id", false),
		References:    mg.Spec.InitProvider.ZoneIdsRefs,
		Selector:      mg.Spec.InitProvider.ZoneIdsSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ZoneIds")
	}
	mg.Spec.InitProvider.ZoneIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ZoneIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Secret.
func (mg *Secret) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DkmsInstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DkmsInstanceIDRef,
		Selector:     mg.Spec.ForProvider.DkmsInstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DkmsInstanceID")
	}
	mg.Spec.ForProvider.DkmsInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DkmsInstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EncryptionKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EncryptionKeyIDRef,
		Selector:     mg.Spec.ForProvider.EncryptionKeyIDSelector,
		To: reference.To{
			List:    &KeyList{},
			Managed: &Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EncryptionKeyID")
	}
	mg.Spec.ForProvider.EncryptionKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EncryptionKeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DkmsInstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DkmsInstanceIDRef,
		Selector:     mg.Spec.InitProvider.DkmsInstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DkmsInstanceID")
	}
	mg.Spec.InitProvider.DkmsInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DkmsInstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EncryptionKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.EncryptionKeyIDRef,
		Selector:     mg.Spec.InitProvider.EncryptionKeyIDSelector,
		To: reference.To{
			List:    &KeyList{},
			Managed: &Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EncryptionKeyID")
	}
	mg.Spec.InitProvider.EncryptionKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EncryptionKeyIDRef = rsp.ResolvedReference

	return nil
}
