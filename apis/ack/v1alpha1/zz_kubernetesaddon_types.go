// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubernetesAddonInitParameters struct {

	// Whether to clean up cloud resources when deleting. Currently only works for addon ack-virtual-node and you must specify it when uninstall addon ack-virtual-node. Valid values: true: clean up, false: do not clean up.
	CleanupCloudResources *bool `json:"cleanupCloudResources,omitempty" tf:"cleanup_cloud_resources,omitempty"`

	// The id of kubernetes cluster.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ack/v1alpha1.ManagedKubernetes
	// +crossplane:generate:reference:refFieldName=ClusterIDRefs
	// +crossplane:generate:reference:selectorFieldName=ClusterIDSelector
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a ManagedKubernetes in ack to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRefs *v1.Reference `json:"clusterIdRefs,omitempty" tf:"-"`

	// Selector for a ManagedKubernetes in ack to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource alicloud_cs_kubernetes_addon_metadata, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source alicloud_cs_kubernetes_addons.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// The name of addon.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The current version of addon.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type KubernetesAddonObservation struct {

	// Is the addon ready for upgrade.
	CanUpgrade *bool `json:"canUpgrade,omitempty" tf:"can_upgrade,omitempty"`

	// Whether to clean up cloud resources when deleting. Currently only works for addon ack-virtual-node and you must specify it when uninstall addon ack-virtual-node. Valid values: true: clean up, false: do not clean up.
	CleanupCloudResources *bool `json:"cleanupCloudResources,omitempty" tf:"cleanup_cloud_resources,omitempty"`

	// The id of kubernetes cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource alicloud_cs_kubernetes_addon_metadata, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source alicloud_cs_kubernetes_addons.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// The id of addon, which consists of the cluster id and the addon name, with the structure <cluster_ud>:<addon_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of addon.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The version which addon can be upgraded to.
	NextVersion *string `json:"nextVersion,omitempty" tf:"next_version,omitempty"`

	// Is it a mandatory addon to be installed.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// The current version of addon.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type KubernetesAddonParameters struct {

	// Whether to clean up cloud resources when deleting. Currently only works for addon ack-virtual-node and you must specify it when uninstall addon ack-virtual-node. Valid values: true: clean up, false: do not clean up.
	// +kubebuilder:validation:Optional
	CleanupCloudResources *bool `json:"cleanupCloudResources,omitempty" tf:"cleanup_cloud_resources,omitempty"`

	// The id of kubernetes cluster.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ack/v1alpha1.ManagedKubernetes
	// +crossplane:generate:reference:refFieldName=ClusterIDRefs
	// +crossplane:generate:reference:selectorFieldName=ClusterIDSelector
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a ManagedKubernetes in ack to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRefs *v1.Reference `json:"clusterIdRefs,omitempty" tf:"-"`

	// Selector for a ManagedKubernetes in ack to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource alicloud_cs_kubernetes_addon_metadata, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source alicloud_cs_kubernetes_addons.
	// +kubebuilder:validation:Optional
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// The name of addon.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The current version of addon.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// KubernetesAddonSpec defines the desired state of KubernetesAddon
type KubernetesAddonSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubernetesAddonParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KubernetesAddonInitParameters `json:"initProvider,omitempty"`
}

// KubernetesAddonStatus defines the observed state of KubernetesAddon.
type KubernetesAddonStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubernetesAddonObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KubernetesAddon is the Schema for the KubernetesAddons API. Provides a Alicloud resource to manage container kubernetes addon.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type KubernetesAddon struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   KubernetesAddonSpec   `json:"spec"`
	Status KubernetesAddonStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesAddonList contains a list of KubernetesAddons
type KubernetesAddonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KubernetesAddon `json:"items"`
}

// Repository type metadata.
var (
	KubernetesAddon_Kind             = "KubernetesAddon"
	KubernetesAddon_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KubernetesAddon_Kind}.String()
	KubernetesAddon_KindAPIVersion   = KubernetesAddon_Kind + "." + CRDGroupVersion.String()
	KubernetesAddon_GroupVersionKind = CRDGroupVersion.WithKind(KubernetesAddon_Kind)
)

func init() {
	SchemeBuilder.Register(&KubernetesAddon{}, &KubernetesAddonList{})
}
