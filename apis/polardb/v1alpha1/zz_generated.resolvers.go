// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha11 "github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1"
	v1alpha12 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	common "github.com/crossplane-contrib/provider-alibabacloud/config/common"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Account.
func (mg *Account) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AccountPrivilege.
func (mg *AccountPrivilege) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccountName),
		Extract:      common.AccountNameExtractor(),
		Reference:    mg.Spec.ForProvider.AccountNameRef,
		Selector:     mg.Spec.ForProvider.AccountNameSelector,
		To: reference.To{
			List:    &AccountList{},
			Managed: &Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AccountName")
	}
	mg.Spec.ForProvider.AccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.DBNames),
		Extract:       resource.ExtractParamPath("db_name", false),
		References:    mg.Spec.ForProvider.DBNamesRefs,
		Selector:      mg.Spec.ForProvider.DBNamesSelector,
		To: reference.To{
			List:    &DatabaseList{},
			Managed: &Database{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBNames")
	}
	mg.Spec.ForProvider.DBNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.DBNamesRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccountName),
		Extract:      common.AccountNameExtractor(),
		Reference:    mg.Spec.InitProvider.AccountNameRef,
		Selector:     mg.Spec.InitProvider.AccountNameSelector,
		To: reference.To{
			List:    &AccountList{},
			Managed: &Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AccountName")
	}
	mg.Spec.InitProvider.AccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.DBNames),
		Extract:       resource.ExtractParamPath("db_name", false),
		References:    mg.Spec.InitProvider.DBNamesRefs,
		Selector:      mg.Spec.InitProvider.DBNamesSelector,
		To: reference.To{
			List:    &DatabaseList{},
			Managed: &Database{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBNames")
	}
	mg.Spec.InitProvider.DBNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.DBNamesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this BackupPolicy.
func (mg *BackupPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Cluster.
func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
		Extract:      common.RoleArnExtractor(),
		Reference:    mg.Spec.ForProvider.RoleArnRef,
		Selector:     mg.Spec.ForProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1alpha1.RoleList{},
			Managed: &v1alpha1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha11.SecurityGroupList{},
			Managed: &v1alpha11.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupIds")
	}
	mg.Spec.ForProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha12.VPCList{},
			Managed: &v1alpha12.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VswitchID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.VswitchIDRef,
		Selector:     mg.Spec.ForProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha12.VswitchList{},
			Managed: &v1alpha12.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchID")
	}
	mg.Spec.ForProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VswitchIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
		Extract:      common.RoleArnExtractor(),
		Reference:    mg.Spec.InitProvider.RoleArnRef,
		Selector:     mg.Spec.InitProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1alpha1.RoleList{},
			Managed: &v1alpha1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.SecurityGroupIDRefs,
		Selector:      mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha11.SecurityGroupList{},
			Managed: &v1alpha11.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupIds")
	}
	mg.Spec.InitProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha12.VPCList{},
			Managed: &v1alpha12.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VswitchID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.VswitchIDRef,
		Selector:     mg.Spec.InitProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha12.VswitchList{},
			Managed: &v1alpha12.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchID")
	}
	mg.Spec.InitProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VswitchIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ClusterEndpoint.
func (mg *ClusterEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Database.
func (mg *Database) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Endpoint.
func (mg *Endpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EndpointAddress.
func (mg *EndpointAddress) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBEndpointID),
		Extract:      common.DBEndpointIdExtractor(),
		Reference:    mg.Spec.ForProvider.DBEndpointIDRef,
		Selector:     mg.Spec.ForProvider.DBEndpointIDSelector,
		To: reference.To{
			List:    &EndpointList{},
			Managed: &Endpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBEndpointID")
	}
	mg.Spec.ForProvider.DBEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBEndpointIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBEndpointID),
		Extract:      common.DBEndpointIdExtractor(),
		Reference:    mg.Spec.InitProvider.DBEndpointIDRef,
		Selector:     mg.Spec.InitProvider.DBEndpointIDSelector,
		To: reference.To{
			List:    &EndpointList{},
			Managed: &Endpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBEndpointID")
	}
	mg.Spec.InitProvider.DBEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBEndpointIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalDatabaseNetwork.
func (mg *GlobalDatabaseNetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrimaryEndpoint.
func (mg *PrimaryEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.ForProvider.DBClusterIDRef,
		Selector:     mg.Spec.ForProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DBClusterID")
	}
	mg.Spec.ForProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DBClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DBClusterID),
		Extract:      common.IdExtractor(),
		Reference:    mg.Spec.InitProvider.DBClusterIDRef,
		Selector:     mg.Spec.InitProvider.DBClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DBClusterID")
	}
	mg.Spec.InitProvider.DBClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DBClusterIDRef = rsp.ResolvedReference

	return nil
}
