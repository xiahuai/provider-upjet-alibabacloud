// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketRefererInitParameters struct {

	// Whether to allow empty Referer request headers.
	AllowEmptyReferer *bool `json:"allowEmptyReferer,omitempty" tf:"allow_empty_referer,omitempty"`

	// Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
	AllowTruncateQueryString *bool `json:"allowTruncateQueryString,omitempty" tf:"allow_truncate_query_string,omitempty"`

	// Name of the Bucket.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The container that holds the Referer blacklist.
	// +listType=set
	RefererBlacklist []*string `json:"refererBlacklist,omitempty" tf:"referer_blacklist,omitempty"`

	// The container that holds the Referer whitelist.
	// +listType=set
	RefererList []*string `json:"refererList,omitempty" tf:"referer_list,omitempty"`

	// Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
	TruncatePath *bool `json:"truncatePath,omitempty" tf:"truncate_path,omitempty"`
}

type BucketRefererObservation struct {

	// Whether to allow empty Referer request headers.
	AllowEmptyReferer *bool `json:"allowEmptyReferer,omitempty" tf:"allow_empty_referer,omitempty"`

	// Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
	AllowTruncateQueryString *bool `json:"allowTruncateQueryString,omitempty" tf:"allow_truncate_query_string,omitempty"`

	// Name of the Bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The container that holds the Referer blacklist.
	// +listType=set
	RefererBlacklist []*string `json:"refererBlacklist,omitempty" tf:"referer_blacklist,omitempty"`

	// The container that holds the Referer whitelist.
	// +listType=set
	RefererList []*string `json:"refererList,omitempty" tf:"referer_list,omitempty"`

	// Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
	TruncatePath *bool `json:"truncatePath,omitempty" tf:"truncate_path,omitempty"`
}

type BucketRefererParameters struct {

	// Whether to allow empty Referer request headers.
	// +kubebuilder:validation:Optional
	AllowEmptyReferer *bool `json:"allowEmptyReferer,omitempty" tf:"allow_empty_referer,omitempty"`

	// Specifies whether to truncate the query string in the URL when the Referer is matched. Valid values: true, false.
	// +kubebuilder:validation:Optional
	AllowTruncateQueryString *bool `json:"allowTruncateQueryString,omitempty" tf:"allow_truncate_query_string,omitempty"`

	// Name of the Bucket.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The container that holds the Referer blacklist.
	// +kubebuilder:validation:Optional
	// +listType=set
	RefererBlacklist []*string `json:"refererBlacklist,omitempty" tf:"referer_blacklist,omitempty"`

	// The container that holds the Referer whitelist.
	// +kubebuilder:validation:Optional
	// +listType=set
	RefererList []*string `json:"refererList,omitempty" tf:"referer_list,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Specifies whether to truncate the path and parts that follow the path in the URL when the Referer is matched. Valid values: true, false. If TruncatePath is set to true, the value of AllowTruncateQueryString must be also true because the query string follows the path component. When the path is truncated, the query string is also truncated.
	// +kubebuilder:validation:Optional
	TruncatePath *bool `json:"truncatePath,omitempty" tf:"truncate_path,omitempty"`
}

// BucketRefererSpec defines the desired state of BucketReferer
type BucketRefererSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketRefererParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketRefererInitParameters `json:"initProvider,omitempty"`
}

// BucketRefererStatus defines the observed state of BucketReferer.
type BucketRefererStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketRefererObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketReferer is the Schema for the BucketReferers API. Provides a Alicloud OSS Bucket Referer resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type BucketReferer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowEmptyReferer) || (has(self.initProvider) && has(self.initProvider.allowEmptyReferer))",message="spec.forProvider.allowEmptyReferer is a required parameter"
	Spec   BucketRefererSpec   `json:"spec"`
	Status BucketRefererStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketRefererList contains a list of BucketReferers
type BucketRefererList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketReferer `json:"items"`
}

// Repository type metadata.
var (
	BucketReferer_Kind             = "BucketReferer"
	BucketReferer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketReferer_Kind}.String()
	BucketReferer_KindAPIVersion   = BucketReferer_Kind + "." + CRDGroupVersion.String()
	BucketReferer_GroupVersionKind = CRDGroupVersion.WithKind(BucketReferer_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketReferer{}, &BucketRefererList{})
}
