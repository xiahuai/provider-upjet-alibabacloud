// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkInterfaceAttachmentInitParameters struct {

	// The ID of the ECS instance.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Instance
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The index of the network card.
	NetworkCardIndex *float64 `json:"networkCardIndex,omitempty" tf:"network_card_index,omitempty"`

	// The ID of the network interface.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.NetworkInterface
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// Reference to a NetworkInterface in ecs to populate networkInterfaceId.
	// +kubebuilder:validation:Optional
	NetworkInterfaceIDRef *v1.Reference `json:"networkInterfaceIdRef,omitempty" tf:"-"`

	// Selector for a NetworkInterface in ecs to populate networkInterfaceId.
	// +kubebuilder:validation:Optional
	NetworkInterfaceIDSelector *v1.Selector `json:"networkInterfaceIdSelector,omitempty" tf:"-"`

	// The ID of the trunk network instance.
	TrunkNetworkInstanceID *string `json:"trunkNetworkInstanceId,omitempty" tf:"trunk_network_instance_id,omitempty"`

	// The wait for network configuration ready.
	WaitForNetworkConfigurationReady *bool `json:"waitForNetworkConfigurationReady,omitempty" tf:"wait_for_network_configuration_ready,omitempty"`
}

type NetworkInterfaceAttachmentObservation struct {

	// It formats as <network_interface_id>:<instance_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the ECS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The index of the network card.
	NetworkCardIndex *float64 `json:"networkCardIndex,omitempty" tf:"network_card_index,omitempty"`

	// The ID of the network interface.
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// The ID of the trunk network instance.
	TrunkNetworkInstanceID *string `json:"trunkNetworkInstanceId,omitempty" tf:"trunk_network_instance_id,omitempty"`

	// The wait for network configuration ready.
	WaitForNetworkConfigurationReady *bool `json:"waitForNetworkConfigurationReady,omitempty" tf:"wait_for_network_configuration_ready,omitempty"`
}

type NetworkInterfaceAttachmentParameters struct {

	// The ID of the ECS instance.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The index of the network card.
	// +kubebuilder:validation:Optional
	NetworkCardIndex *float64 `json:"networkCardIndex,omitempty" tf:"network_card_index,omitempty"`

	// The ID of the network interface.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.NetworkInterface
	// +kubebuilder:validation:Optional
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// Reference to a NetworkInterface in ecs to populate networkInterfaceId.
	// +kubebuilder:validation:Optional
	NetworkInterfaceIDRef *v1.Reference `json:"networkInterfaceIdRef,omitempty" tf:"-"`

	// Selector for a NetworkInterface in ecs to populate networkInterfaceId.
	// +kubebuilder:validation:Optional
	NetworkInterfaceIDSelector *v1.Selector `json:"networkInterfaceIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The ID of the trunk network instance.
	// +kubebuilder:validation:Optional
	TrunkNetworkInstanceID *string `json:"trunkNetworkInstanceId,omitempty" tf:"trunk_network_instance_id,omitempty"`

	// The wait for network configuration ready.
	// +kubebuilder:validation:Optional
	WaitForNetworkConfigurationReady *bool `json:"waitForNetworkConfigurationReady,omitempty" tf:"wait_for_network_configuration_ready,omitempty"`
}

// NetworkInterfaceAttachmentSpec defines the desired state of NetworkInterfaceAttachment
type NetworkInterfaceAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkInterfaceAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInterfaceAttachmentInitParameters `json:"initProvider,omitempty"`
}

// NetworkInterfaceAttachmentStatus defines the observed state of NetworkInterfaceAttachment.
type NetworkInterfaceAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkInterfaceAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkInterfaceAttachment is the Schema for the NetworkInterfaceAttachments API. Provides a Alicloud ECS Network Interface Attachment resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type NetworkInterfaceAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkInterfaceAttachmentSpec   `json:"spec"`
	Status            NetworkInterfaceAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkInterfaceAttachmentList contains a list of NetworkInterfaceAttachments
type NetworkInterfaceAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkInterfaceAttachment `json:"items"`
}

// Repository type metadata.
var (
	NetworkInterfaceAttachment_Kind             = "NetworkInterfaceAttachment"
	NetworkInterfaceAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkInterfaceAttachment_Kind}.String()
	NetworkInterfaceAttachment_KindAPIVersion   = NetworkInterfaceAttachment_Kind + "." + CRDGroupVersion.String()
	NetworkInterfaceAttachment_GroupVersionKind = CRDGroupVersion.WithKind(NetworkInterfaceAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkInterfaceAttachment{}, &NetworkInterfaceAttachmentList{})
}
