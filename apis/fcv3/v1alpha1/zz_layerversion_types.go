// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LayerVersionCodeInitParameters struct {

	// The CRC-64 value of the code package. If checksum is provided, Function Compute checks whether the checksum of the code package is consistent with the provided checksum.
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// Name of the OSS Bucket where the user stores the Layer Code ZIP package
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	OssBucketName *string `json:"ossBucketName,omitempty" tf:"oss_bucket_name,omitempty"`

	// Reference to a Bucket in oss to populate ossBucketName.
	// +kubebuilder:validation:Optional
	OssBucketNameRef *v1.Reference `json:"ossBucketNameRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate ossBucketName.
	// +kubebuilder:validation:Optional
	OssBucketNameSelector *v1.Selector `json:"ossBucketNameSelector,omitempty" tf:"-"`

	// Name of the OSS Object where the user stores the Layer Code ZIP package
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.BucketObject
	OssObjectName *string `json:"ossObjectName,omitempty" tf:"oss_object_name,omitempty"`

	// Reference to a BucketObject in oss to populate ossObjectName.
	// +kubebuilder:validation:Optional
	OssObjectNameRef *v1.Reference `json:"ossObjectNameRef,omitempty" tf:"-"`

	// Selector for a BucketObject in oss to populate ossObjectName.
	// +kubebuilder:validation:Optional
	OssObjectNameSelector *v1.Selector `json:"ossObjectNameSelector,omitempty" tf:"-"`

	// Base 64 encoding of Layer Code ZIP package
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type LayerVersionCodeObservation struct {

	// The CRC-64 value of the code package. If checksum is provided, Function Compute checks whether the checksum of the code package is consistent with the provided checksum.
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// Name of the OSS Bucket where the user stores the Layer Code ZIP package
	OssBucketName *string `json:"ossBucketName,omitempty" tf:"oss_bucket_name,omitempty"`

	// Name of the OSS Object where the user stores the Layer Code ZIP package
	OssObjectName *string `json:"ossObjectName,omitempty" tf:"oss_object_name,omitempty"`

	// Base 64 encoding of Layer Code ZIP package
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type LayerVersionCodeParameters struct {

	// The CRC-64 value of the code package. If checksum is provided, Function Compute checks whether the checksum of the code package is consistent with the provided checksum.
	// +kubebuilder:validation:Optional
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// Name of the OSS Bucket where the user stores the Layer Code ZIP package
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	OssBucketName *string `json:"ossBucketName,omitempty" tf:"oss_bucket_name,omitempty"`

	// Reference to a Bucket in oss to populate ossBucketName.
	// +kubebuilder:validation:Optional
	OssBucketNameRef *v1.Reference `json:"ossBucketNameRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate ossBucketName.
	// +kubebuilder:validation:Optional
	OssBucketNameSelector *v1.Selector `json:"ossBucketNameSelector,omitempty" tf:"-"`

	// Name of the OSS Object where the user stores the Layer Code ZIP package
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.BucketObject
	// +kubebuilder:validation:Optional
	OssObjectName *string `json:"ossObjectName,omitempty" tf:"oss_object_name,omitempty"`

	// Reference to a BucketObject in oss to populate ossObjectName.
	// +kubebuilder:validation:Optional
	OssObjectNameRef *v1.Reference `json:"ossObjectNameRef,omitempty" tf:"-"`

	// Selector for a BucketObject in oss to populate ossObjectName.
	// +kubebuilder:validation:Optional
	OssObjectNameSelector *v1.Selector `json:"ossObjectNameSelector,omitempty" tf:"-"`

	// Base 64 encoding of Layer Code ZIP package
	// +kubebuilder:validation:Optional
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type LayerVersionInitParameters struct {

	// The access permission of the layer, 1: public, 0: private, default is private
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Layer code configuration See code below.
	Code []LayerVersionCodeInitParameters `json:"code,omitempty" tf:"code,omitempty"`

	// List of runtime environments supported by the layer
	CompatibleRuntime []*string `json:"compatibleRuntime,omitempty" tf:"compatible_runtime,omitempty"`

	// Description of the version
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the layer
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// Layer License Agreement
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public *string `json:"public,omitempty" tf:"public,omitempty"`
}

type LayerVersionObservation struct {

	// The access permission of the layer, 1: public, 0: private, default is private
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Layer code configuration See code below.
	Code []LayerVersionCodeObservation `json:"code,omitempty" tf:"code,omitempty"`

	// (Available since v1.234.0) The code package size of the layer, in bytes.
	CodeSize *string `json:"codeSize,omitempty" tf:"code_size,omitempty"`

	// List of runtime environments supported by the layer
	CompatibleRuntime []*string `json:"compatibleRuntime,omitempty" tf:"compatible_runtime,omitempty"`

	// The creation time of the resource
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description of the version
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the resource supplied above.The value is formulated as <layer_name>:<version>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the layer
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// (Available since v1.234.0) Layer version ARN. The format is acs:fc:{region }:{ accountID}:layers/{layerName}/versions/{layerVersion}.
	LayerVersionArn *string `json:"layerVersionArn,omitempty" tf:"layer_version_arn,omitempty"`

	// Layer License Agreement
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public *string `json:"public,omitempty" tf:"public,omitempty"`

	// The version of the layer
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LayerVersionParameters struct {

	// The access permission of the layer, 1: public, 0: private, default is private
	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Layer code configuration See code below.
	// +kubebuilder:validation:Optional
	Code []LayerVersionCodeParameters `json:"code,omitempty" tf:"code,omitempty"`

	// List of runtime environments supported by the layer
	// +kubebuilder:validation:Optional
	CompatibleRuntime []*string `json:"compatibleRuntime,omitempty" tf:"compatible_runtime,omitempty"`

	// Description of the version
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the layer
	// +kubebuilder:validation:Optional
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// Layer License Agreement
	// +kubebuilder:validation:Optional
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	// +kubebuilder:validation:Optional
	Public *string `json:"public,omitempty" tf:"public,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// LayerVersionSpec defines the desired state of LayerVersion
type LayerVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LayerVersionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LayerVersionInitParameters `json:"initProvider,omitempty"`
}

// LayerVersionStatus defines the observed state of LayerVersion.
type LayerVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LayerVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LayerVersion is the Schema for the LayerVersions API. Provides a Alicloud FCV3 Layer Version resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type LayerVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.layerName) || (has(self.initProvider) && has(self.initProvider.layerName))",message="spec.forProvider.layerName is a required parameter"
	Spec   LayerVersionSpec   `json:"spec"`
	Status LayerVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LayerVersionList contains a list of LayerVersions
type LayerVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LayerVersion `json:"items"`
}

// Repository type metadata.
var (
	LayerVersion_Kind             = "LayerVersion"
	LayerVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LayerVersion_Kind}.String()
	LayerVersion_KindAPIVersion   = LayerVersion_Kind + "." + CRDGroupVersion.String()
	LayerVersion_GroupVersionKind = CRDGroupVersion.WithKind(LayerVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&LayerVersion{}, &LayerVersionList{})
}
