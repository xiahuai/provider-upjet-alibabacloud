// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageSharePermissionInitParameters struct {

	// Alibaba Cloud Account ID. It is used to share images.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The source image ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Image
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`
}

type ImageSharePermissionObservation struct {

	// Alibaba Cloud Account ID. It is used to share images.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// ID of the image. It formats as <image_id>:<account_id>
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The source image ID.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`
}

type ImageSharePermissionParameters struct {

	// Alibaba Cloud Account ID. It is used to share images.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The source image ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Image
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image in ecs to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// ImageSharePermissionSpec defines the desired state of ImageSharePermission
type ImageSharePermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageSharePermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageSharePermissionInitParameters `json:"initProvider,omitempty"`
}

// ImageSharePermissionStatus defines the observed state of ImageSharePermission.
type ImageSharePermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageSharePermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ImageSharePermission is the Schema for the ImageSharePermissions API. Provides an ECS image share permission resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type ImageSharePermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   ImageSharePermissionSpec   `json:"spec"`
	Status ImageSharePermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageSharePermissionList contains a list of ImageSharePermissions
type ImageSharePermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageSharePermission `json:"items"`
}

// Repository type metadata.
var (
	ImageSharePermission_Kind             = "ImageSharePermission"
	ImageSharePermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageSharePermission_Kind}.String()
	ImageSharePermission_KindAPIVersion   = ImageSharePermission_Kind + "." + CRDGroupVersion.String()
	ImageSharePermission_GroupVersionKind = CRDGroupVersion.WithKind(ImageSharePermission_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageSharePermission{}, &ImageSharePermissionList{})
}
