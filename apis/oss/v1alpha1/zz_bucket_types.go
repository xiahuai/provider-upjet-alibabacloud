// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AbortMultipartUploadInitParameters struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type AbortMultipartUploadObservation struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type AbortMultipartUploadParameters struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	// +kubebuilder:validation:Optional
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type AccessMonitorInitParameters struct {

	// Specifies the versioning state of a bucket. Valid values: Enabled and Suspended.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AccessMonitorObservation struct {

	// Specifies the versioning state of a bucket. Valid values: Enabled and Suspended.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AccessMonitorParameters struct {

	// Specifies the versioning state of a bucket. Valid values: Enabled and Suspended.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BucketInitParameters struct {

	// A access monitor status of a bucket. See access_monitor below.
	AccessMonitor []AccessMonitorInitParameters `json:"accessMonitor,omitempty" tf:"access_monitor,omitempty"`

	// The name of the bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// A rule of  Cross-Origin Resource Sharing. The items of core rule are no more than 10 for every OSS bucket. See cors_rule below.
	CorsRule []CorsRuleInitParameters `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable. Defaults to "false".
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// A configuration of object lifecycle management. See lifecycle_rule below.
	LifecycleRule []LifecycleRuleInitParameters `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	// A boolean that indicates lifecycle rules allow prefix overlap.
	LifecycleRuleAllowSameActionOverlap *bool `json:"lifecycleRuleAllowSameActionOverlap,omitempty" tf:"lifecycle_rule_allow_same_action_overlap,omitempty"`

	// A Settings of bucket logging. See logging below.
	Logging []LoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// The redundancy type to enable. Can be "LRS", and "ZRS". Defaults to "LRS".
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// The ID of the resource group to which the bucket belongs.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// A configuration of server-side encryption. See server_side_encryption_rule below.
	ServerSideEncryptionRule []ServerSideEncryptionRuleInitParameters `json:"serverSideEncryptionRule,omitempty" tf:"server_side_encryption_rule,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A transfer acceleration status of a bucket. See transfer_acceleration below.
	TransferAcceleration []TransferAccelerationInitParameters `json:"transferAcceleration,omitempty" tf:"transfer_acceleration,omitempty"`

	// A state of versioning. See versioning below.
	Versioning []VersioningInitParameters `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// A website configuration. See website below.
	Website []WebsiteInitParameters `json:"website,omitempty" tf:"website,omitempty"`
}

type BucketObservation struct {

	// A access monitor status of a bucket. See access_monitor below.
	AccessMonitor []AccessMonitorObservation `json:"accessMonitor,omitempty" tf:"access_monitor,omitempty"`

	// The name of the bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// A rule of  Cross-Origin Resource Sharing. The items of core rule are no more than 10 for every OSS bucket. See cors_rule below.
	CorsRule []CorsRuleObservation `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// The creation date of the bucket.
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// The extranet access endpoint of the bucket.
	ExtranetEndpoint *string `json:"extranetEndpoint,omitempty" tf:"extranet_endpoint,omitempty"`

	// A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable. Defaults to "false".
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The intranet access endpoint of the bucket.
	IntranetEndpoint *string `json:"intranetEndpoint,omitempty" tf:"intranet_endpoint,omitempty"`

	// A configuration of object lifecycle management. See lifecycle_rule below.
	LifecycleRule []LifecycleRuleObservation `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	// A boolean that indicates lifecycle rules allow prefix overlap.
	LifecycleRuleAllowSameActionOverlap *bool `json:"lifecycleRuleAllowSameActionOverlap,omitempty" tf:"lifecycle_rule_allow_same_action_overlap,omitempty"`

	// The location of the bucket.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A Settings of bucket logging. See logging below.
	Logging []LoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	// The bucket owner.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The redundancy type to enable. Can be "LRS", and "ZRS". Defaults to "LRS".
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// The ID of the resource group to which the bucket belongs.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// A configuration of server-side encryption. See server_side_encryption_rule below.
	ServerSideEncryptionRule []ServerSideEncryptionRuleObservation `json:"serverSideEncryptionRule,omitempty" tf:"server_side_encryption_rule,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A transfer acceleration status of a bucket. See transfer_acceleration below.
	TransferAcceleration []TransferAccelerationObservation `json:"transferAcceleration,omitempty" tf:"transfer_acceleration,omitempty"`

	// A state of versioning. See versioning below.
	Versioning []VersioningObservation `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// A website configuration. See website below.
	Website []WebsiteObservation `json:"website,omitempty" tf:"website,omitempty"`
}

type BucketParameters struct {

	// A access monitor status of a bucket. See access_monitor below.
	// +kubebuilder:validation:Optional
	AccessMonitor []AccessMonitorParameters `json:"accessMonitor,omitempty" tf:"access_monitor,omitempty"`

	// The name of the bucket.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// A rule of  Cross-Origin Resource Sharing. The items of core rule are no more than 10 for every OSS bucket. See cors_rule below.
	// +kubebuilder:validation:Optional
	CorsRule []CorsRuleParameters `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable. Defaults to "false".
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// A configuration of object lifecycle management. See lifecycle_rule below.
	// +kubebuilder:validation:Optional
	LifecycleRule []LifecycleRuleParameters `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	// A boolean that indicates lifecycle rules allow prefix overlap.
	// +kubebuilder:validation:Optional
	LifecycleRuleAllowSameActionOverlap *bool `json:"lifecycleRuleAllowSameActionOverlap,omitempty" tf:"lifecycle_rule_allow_same_action_overlap,omitempty"`

	// A Settings of bucket logging. See logging below.
	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// The redundancy type to enable. Can be "LRS", and "ZRS". Defaults to "LRS".
	// +kubebuilder:validation:Optional
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The ID of the resource group to which the bucket belongs.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// A configuration of server-side encryption. See server_side_encryption_rule below.
	// +kubebuilder:validation:Optional
	ServerSideEncryptionRule []ServerSideEncryptionRuleParameters `json:"serverSideEncryptionRule,omitempty" tf:"server_side_encryption_rule,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A transfer acceleration status of a bucket. See transfer_acceleration below.
	// +kubebuilder:validation:Optional
	TransferAcceleration []TransferAccelerationParameters `json:"transferAcceleration,omitempty" tf:"transfer_acceleration,omitempty"`

	// A state of versioning. See versioning below.
	// +kubebuilder:validation:Optional
	Versioning []VersioningParameters `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// A website configuration. See website below.
	// +kubebuilder:validation:Optional
	Website []WebsiteParameters `json:"website,omitempty" tf:"website,omitempty"`
}

type CorsRuleInitParameters struct {

	// Specifies which headers are allowed.
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// Specifies which origins are allowed.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// Specifies expose header in the response.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRuleObservation struct {

	// Specifies which headers are allowed.
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// Specifies which origins are allowed.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// Specifies expose header in the response.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRuleParameters struct {

	// Specifies which headers are allowed.
	// +kubebuilder:validation:Optional
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
	// +kubebuilder:validation:Optional
	AllowedMethods []*string `json:"allowedMethods" tf:"allowed_methods,omitempty"`

	// Specifies which origins are allowed.
	// +kubebuilder:validation:Optional
	AllowedOrigins []*string `json:"allowedOrigins" tf:"allowed_origins,omitempty"`

	// Specifies expose header in the response.
	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies time in seconds that browser can cache the response for a preflight request.
	// +kubebuilder:validation:Optional
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type ExpirationInitParameters struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like 2017-03-09.
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker *bool `json:"expiredObjectDeleteMarker,omitempty" tf:"expired_object_delete_marker,omitempty"`
}

type ExpirationObservation struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like 2017-03-09.
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker *bool `json:"expiredObjectDeleteMarker,omitempty" tf:"expired_object_delete_marker,omitempty"`
}

type ExpirationParameters struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	// +kubebuilder:validation:Optional
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like 2017-03-09.
	// +kubebuilder:validation:Optional
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct OSS to delete expired object delete markers. This cannot be specified with Days, Date or CreatedBeforeDate in a Lifecycle Expiration Policy.
	// +kubebuilder:validation:Optional
	ExpiredObjectDeleteMarker *bool `json:"expiredObjectDeleteMarker,omitempty" tf:"expired_object_delete_marker,omitempty"`
}

type FilterInitParameters struct {

	// The condition that is matched by objects to which the lifecycle rule does not apply. See not below.
	Not []NotInitParameters `json:"not,omitempty" tf:"not,omitempty"`

	// Minimum object size (in bytes) to which the rule applies.
	ObjectSizeGreaterThan *float64 `json:"objectSizeGreaterThan,omitempty" tf:"object_size_greater_than,omitempty"`

	// Maximum object size (in bytes) to which the rule applies.
	ObjectSizeLessThan *float64 `json:"objectSizeLessThan,omitempty" tf:"object_size_less_than,omitempty"`
}

type FilterObservation struct {

	// The condition that is matched by objects to which the lifecycle rule does not apply. See not below.
	Not []NotObservation `json:"not,omitempty" tf:"not,omitempty"`

	// Minimum object size (in bytes) to which the rule applies.
	ObjectSizeGreaterThan *float64 `json:"objectSizeGreaterThan,omitempty" tf:"object_size_greater_than,omitempty"`

	// Maximum object size (in bytes) to which the rule applies.
	ObjectSizeLessThan *float64 `json:"objectSizeLessThan,omitempty" tf:"object_size_less_than,omitempty"`
}

type FilterParameters struct {

	// The condition that is matched by objects to which the lifecycle rule does not apply. See not below.
	// +kubebuilder:validation:Optional
	Not []NotParameters `json:"not,omitempty" tf:"not,omitempty"`

	// Minimum object size (in bytes) to which the rule applies.
	// +kubebuilder:validation:Optional
	ObjectSizeGreaterThan *float64 `json:"objectSizeGreaterThan,omitempty" tf:"object_size_greater_than,omitempty"`

	// Maximum object size (in bytes) to which the rule applies.
	// +kubebuilder:validation:Optional
	ObjectSizeLessThan *float64 `json:"objectSizeLessThan,omitempty" tf:"object_size_less_than,omitempty"`
}

type LifecycleRuleInitParameters struct {

	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed. See abort_multipart_upload below.
	AbortMultipartUpload []AbortMultipartUploadInitParameters `json:"abortMultipartUpload,omitempty" tf:"abort_multipart_upload,omitempty"`

	// Specifies lifecycle rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies a period in the object's expire. See expiration below.
	Expiration []ExpirationInitParameters `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// Configuration block used to identify objects that a Lifecycle rule applies to. See filter below.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies when noncurrent object versions expire. See noncurrent_version_expiration below.
	NoncurrentVersionExpiration []NoncurrentVersionExpirationInitParameters `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	// Specifies when noncurrent object versions transitions. See noncurrent_version_transition below.
	NoncurrentVersionTransition []NoncurrentVersionTransitionInitParameters `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	// Object key prefix identifying one or more objects to which the rule applies. Default value is null, the rule applies to all objects in a bucket.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle. See transitions below.
	Transitions []TransitionsInitParameters `json:"transitions,omitempty" tf:"transitions,omitempty"`
}

type LifecycleRuleObservation struct {

	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed. See abort_multipart_upload below.
	AbortMultipartUpload []AbortMultipartUploadObservation `json:"abortMultipartUpload,omitempty" tf:"abort_multipart_upload,omitempty"`

	// Specifies lifecycle rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies a period in the object's expire. See expiration below.
	Expiration []ExpirationObservation `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// Configuration block used to identify objects that a Lifecycle rule applies to. See filter below.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies when noncurrent object versions expire. See noncurrent_version_expiration below.
	NoncurrentVersionExpiration []NoncurrentVersionExpirationObservation `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	// Specifies when noncurrent object versions transitions. See noncurrent_version_transition below.
	NoncurrentVersionTransition []NoncurrentVersionTransitionObservation `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	// Object key prefix identifying one or more objects to which the rule applies. Default value is null, the rule applies to all objects in a bucket.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle. See transitions below.
	Transitions []TransitionsObservation `json:"transitions,omitempty" tf:"transitions,omitempty"`
}

type LifecycleRuleParameters struct {

	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed. See abort_multipart_upload below.
	// +kubebuilder:validation:Optional
	AbortMultipartUpload []AbortMultipartUploadParameters `json:"abortMultipartUpload,omitempty" tf:"abort_multipart_upload,omitempty"`

	// Specifies lifecycle rule status.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Specifies a period in the object's expire. See expiration below.
	// +kubebuilder:validation:Optional
	Expiration []ExpirationParameters `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// Configuration block used to identify objects that a Lifecycle rule applies to. See filter below.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies when noncurrent object versions expire. See noncurrent_version_expiration below.
	// +kubebuilder:validation:Optional
	NoncurrentVersionExpiration []NoncurrentVersionExpirationParameters `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	// Specifies when noncurrent object versions transitions. See noncurrent_version_transition below.
	// +kubebuilder:validation:Optional
	NoncurrentVersionTransition []NoncurrentVersionTransitionParameters `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	// Object key prefix identifying one or more objects to which the rule applies. Default value is null, the rule applies to all objects in a bucket.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle. See transitions below.
	// +kubebuilder:validation:Optional
	Transitions []TransitionsParameters `json:"transitions,omitempty" tf:"transitions,omitempty"`
}

type LoggingInitParameters struct {

	// The name of the bucket that will receive the log objects.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	TargetBucket *string `json:"targetBucket,omitempty" tf:"target_bucket,omitempty"`

	// Reference to a Bucket in oss to populate targetBucket.
	// +kubebuilder:validation:Optional
	TargetBucketRef *v1.Reference `json:"targetBucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate targetBucket.
	// +kubebuilder:validation:Optional
	TargetBucketSelector *v1.Selector `json:"targetBucketSelector,omitempty" tf:"-"`

	// To specify a key prefix for log objects.
	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type LoggingObservation struct {

	// The name of the bucket that will receive the log objects.
	TargetBucket *string `json:"targetBucket,omitempty" tf:"target_bucket,omitempty"`

	// To specify a key prefix for log objects.
	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type LoggingParameters struct {

	// The name of the bucket that will receive the log objects.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TargetBucket *string `json:"targetBucket,omitempty" tf:"target_bucket,omitempty"`

	// Reference to a Bucket in oss to populate targetBucket.
	// +kubebuilder:validation:Optional
	TargetBucketRef *v1.Reference `json:"targetBucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate targetBucket.
	// +kubebuilder:validation:Optional
	TargetBucketSelector *v1.Selector `json:"targetBucketSelector,omitempty" tf:"-"`

	// To specify a key prefix for log objects.
	// +kubebuilder:validation:Optional
	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type NoncurrentVersionExpirationInitParameters struct {

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type NoncurrentVersionExpirationObservation struct {

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type NoncurrentVersionExpirationParameters struct {

	// Specifies the number of days after object creation when the specific rule action takes effect.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`
}

type NoncurrentVersionTransitionInitParameters struct {

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies whether the lifecycle rule applies to objects based on their last access time. If set to true, the rule applies to objects based on their last access time; if set to false, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable access_monitor first.
	IsAccessTime *bool `json:"isAccessTime,omitempty" tf:"is_access_time,omitempty"`

	// Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to true, converts the storage class of the objects to Standard; if set to false, does not convert the storage class of the objects to Standard.
	// NOTE: One and only one of "created_before_date" and "days" can be specified in one transition configuration.
	ReturnToStdWhenVisit *bool `json:"returnToStdWhenVisit,omitempty" tf:"return_to_std_when_visit,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentVersionTransitionObservation struct {

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies whether the lifecycle rule applies to objects based on their last access time. If set to true, the rule applies to objects based on their last access time; if set to false, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable access_monitor first.
	IsAccessTime *bool `json:"isAccessTime,omitempty" tf:"is_access_time,omitempty"`

	// Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to true, converts the storage class of the objects to Standard; if set to false, does not convert the storage class of the objects to Standard.
	// NOTE: One and only one of "created_before_date" and "days" can be specified in one transition configuration.
	ReturnToStdWhenVisit *bool `json:"returnToStdWhenVisit,omitempty" tf:"return_to_std_when_visit,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentVersionTransitionParameters struct {

	// Specifies the number of days after object creation when the specific rule action takes effect.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`

	// Specifies whether the lifecycle rule applies to objects based on their last access time. If set to true, the rule applies to objects based on their last access time; if set to false, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable access_monitor first.
	// +kubebuilder:validation:Optional
	IsAccessTime *bool `json:"isAccessTime,omitempty" tf:"is_access_time,omitempty"`

	// Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to true, converts the storage class of the objects to Standard; if set to false, does not convert the storage class of the objects to Standard.
	// NOTE: One and only one of "created_before_date" and "days" can be specified in one transition configuration.
	// +kubebuilder:validation:Optional
	ReturnToStdWhenVisit *bool `json:"returnToStdWhenVisit,omitempty" tf:"return_to_std_when_visit,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`
}

type NotInitParameters struct {

	// Object key prefix identifying one or more objects to which the rule applies. Default value is null, the rule applies to all objects in a bucket.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The tag of the objects to which the lifecycle rule does not apply. See tag below.
	Tag []TagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NotObservation struct {

	// Object key prefix identifying one or more objects to which the rule applies. Default value is null, the rule applies to all objects in a bucket.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The tag of the objects to which the lifecycle rule does not apply. See tag below.
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NotParameters struct {

	// Object key prefix identifying one or more objects to which the rule applies. Default value is null, the rule applies to all objects in a bucket.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The tag of the objects to which the lifecycle rule does not apply. See tag below.
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ServerSideEncryptionRuleInitParameters struct {

	// The algorithm used to encrypt objects. If this element is not specified, objects are encrypted with AES256. This element is valid only when the value of SSEAlgorithm is set to KMS. Valid values: SM4.
	KMSDataEncryption *string `json:"kmsDataEncryption,omitempty" tf:"kms_data_encryption,omitempty"`

	// The alibaba cloud KMS master key ID used for the SSE-KMS encryption.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/kms/v1alpha1.Key
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	// Reference to a Key in kms to populate kmsMasterKeyId.
	// +kubebuilder:validation:Optional
	KMSMasterKeyIDRef *v1.Reference `json:"kmsMasterKeyIdRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsMasterKeyId.
	// +kubebuilder:validation:Optional
	KMSMasterKeyIDSelector *v1.Selector `json:"kmsMasterKeyIdSelector,omitempty" tf:"-"`

	// The server-side encryption algorithm to use. Possible values: AES256 and KMS.
	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`
}

type ServerSideEncryptionRuleObservation struct {

	// The algorithm used to encrypt objects. If this element is not specified, objects are encrypted with AES256. This element is valid only when the value of SSEAlgorithm is set to KMS. Valid values: SM4.
	KMSDataEncryption *string `json:"kmsDataEncryption,omitempty" tf:"kms_data_encryption,omitempty"`

	// The alibaba cloud KMS master key ID used for the SSE-KMS encryption.
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	// The server-side encryption algorithm to use. Possible values: AES256 and KMS.
	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`
}

type ServerSideEncryptionRuleParameters struct {

	// The algorithm used to encrypt objects. If this element is not specified, objects are encrypted with AES256. This element is valid only when the value of SSEAlgorithm is set to KMS. Valid values: SM4.
	// +kubebuilder:validation:Optional
	KMSDataEncryption *string `json:"kmsDataEncryption,omitempty" tf:"kms_data_encryption,omitempty"`

	// The alibaba cloud KMS master key ID used for the SSE-KMS encryption.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/kms/v1alpha1.Key
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	// Reference to a Key in kms to populate kmsMasterKeyId.
	// +kubebuilder:validation:Optional
	KMSMasterKeyIDRef *v1.Reference `json:"kmsMasterKeyIdRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsMasterKeyId.
	// +kubebuilder:validation:Optional
	KMSMasterKeyIDSelector *v1.Selector `json:"kmsMasterKeyIdSelector,omitempty" tf:"-"`

	// The server-side encryption algorithm to use. Possible values: AES256 and KMS.
	// +kubebuilder:validation:Optional
	SseAlgorithm *string `json:"sseAlgorithm" tf:"sse_algorithm,omitempty"`
}

type TagInitParameters struct {

	// The key of the tag that is specified for the objects.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value of the tag that is specified for the objects.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagObservation struct {

	// The key of the tag that is specified for the objects.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value of the tag that is specified for the objects.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagParameters struct {

	// The key of the tag that is specified for the objects.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The value of the tag that is specified for the objects.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TransferAccelerationInitParameters struct {

	// Specifies lifecycle rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TransferAccelerationObservation struct {

	// Specifies lifecycle rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TransferAccelerationParameters struct {

	// Specifies lifecycle rule status.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type TransitionsInitParameters struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies whether the lifecycle rule applies to objects based on their last access time. If set to true, the rule applies to objects based on their last access time; if set to false, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable access_monitor first.
	IsAccessTime *bool `json:"isAccessTime,omitempty" tf:"is_access_time,omitempty"`

	// Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to true, converts the storage class of the objects to Standard; if set to false, does not convert the storage class of the objects to Standard.
	// NOTE: One and only one of "created_before_date" and "days" can be specified in one transition configuration.
	ReturnToStdWhenVisit *bool `json:"returnToStdWhenVisit,omitempty" tf:"return_to_std_when_visit,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionsObservation struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies whether the lifecycle rule applies to objects based on their last access time. If set to true, the rule applies to objects based on their last access time; if set to false, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable access_monitor first.
	IsAccessTime *bool `json:"isAccessTime,omitempty" tf:"is_access_time,omitempty"`

	// Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to true, converts the storage class of the objects to Standard; if set to false, does not convert the storage class of the objects to Standard.
	// NOTE: One and only one of "created_before_date" and "days" can be specified in one transition configuration.
	ReturnToStdWhenVisit *bool `json:"returnToStdWhenVisit,omitempty" tf:"return_to_std_when_visit,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionsParameters struct {

	// Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
	// +kubebuilder:validation:Optional
	CreatedBeforeDate *string `json:"createdBeforeDate,omitempty" tf:"created_before_date,omitempty"`

	// Specifies the number of days after object creation when the specific rule action takes effect.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies whether the lifecycle rule applies to objects based on their last access time. If set to true, the rule applies to objects based on their last access time; if set to false, the rule applies to objects based on their last modified time. If configure the rule based on the last access time, please enable access_monitor first.
	// +kubebuilder:validation:Optional
	IsAccessTime *bool `json:"isAccessTime,omitempty" tf:"is_access_time,omitempty"`

	// Specifies whether to convert the storage class of non-Standard objects back to Standard after the objects are accessed. It takes effect only when the IsAccessTime parameter is set to true. If set to true, converts the storage class of the objects to Standard; if set to false, does not convert the storage class of the objects to Standard.
	// NOTE: One and only one of "created_before_date" and "days" can be specified in one transition configuration.
	// +kubebuilder:validation:Optional
	ReturnToStdWhenVisit *bool `json:"returnToStdWhenVisit,omitempty" tf:"return_to_std_when_visit,omitempty"`

	// The storage class to apply. Can be "Standard", "IA", "Archive", "ColdArchive" and "DeepColdArchive". Defaults to "Standard". "ColdArchive" is available since 1.203.0. "DeepColdArchive" is available since 1.209.0.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`
}

type VersioningInitParameters struct {

	// Specifies the versioning state of a bucket. Valid values: Enabled and Suspended.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VersioningObservation struct {

	// Specifies the versioning state of a bucket. Valid values: Enabled and Suspended.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VersioningParameters struct {

	// Specifies the versioning state of a bucket. Valid values: Enabled and Suspended.
	// +kubebuilder:validation:Optional
	Status *string `json:"status" tf:"status,omitempty"`
}

type WebsiteInitParameters struct {

	// An absolute path to the document to return in case of a 4XX error.
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Alicloud OSS returns this index document when requests are made to the root domain or any of the subfolders.
	IndexDocument *string `json:"indexDocument,omitempty" tf:"index_document,omitempty"`
}

type WebsiteObservation struct {

	// An absolute path to the document to return in case of a 4XX error.
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Alicloud OSS returns this index document when requests are made to the root domain or any of the subfolders.
	IndexDocument *string `json:"indexDocument,omitempty" tf:"index_document,omitempty"`
}

type WebsiteParameters struct {

	// An absolute path to the document to return in case of a 4XX error.
	// +kubebuilder:validation:Optional
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Alicloud OSS returns this index document when requests are made to the root domain or any of the subfolders.
	// +kubebuilder:validation:Optional
	IndexDocument *string `json:"indexDocument" tf:"index_document,omitempty"`
}

// BucketSpec defines the desired state of Bucket
type BucketSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketInitParameters `json:"initProvider,omitempty"`
}

// BucketStatus defines the observed state of Bucket.
type BucketStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Bucket is the Schema for the Buckets API. Provides a resource to create a oss bucket.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Bucket struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketSpec   `json:"spec"`
	Status            BucketStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketList contains a list of Buckets
type BucketList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bucket `json:"items"`
}

// Repository type metadata.
var (
	Bucket_Kind             = "Bucket"
	Bucket_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bucket_Kind}.String()
	Bucket_KindAPIVersion   = Bucket_Kind + "." + CRDGroupVersion.String()
	Bucket_GroupVersionKind = CRDGroupVersion.WithKind(Bucket_Kind)
)

func init() {
	SchemeBuilder.Register(&Bucket{}, &BucketList{})
}
