// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainConfigInitParameters struct {

	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/cdn/v1alpha1.Domain
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Reference to a Domain in cdn to populate domainName.
	// +kubebuilder:validation:Optional
	DomainNameRef *v1.Reference `json:"domainNameRef,omitempty" tf:"-"`

	// Selector for a Domain in cdn to populate domainName.
	// +kubebuilder:validation:Optional
	DomainNameSelector *v1.Selector `json:"domainNameSelector,omitempty" tf:"-"`

	// The args of the domain config. See function_args below.
	FunctionArgs []FunctionArgsInitParameters `json:"functionArgs,omitempty" tf:"function_args,omitempty"`

	// The name of the domain config.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`
}

type DomainConfigObservation struct {

	// (Available since v1.132.0) The ID of the domain config function.
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The args of the domain config. See function_args below.
	FunctionArgs []FunctionArgsObservation `json:"functionArgs,omitempty" tf:"function_args,omitempty"`

	// The name of the domain config.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// It formats as <domain_name>:<function_name>:<config_id>.
	// -> NOTE: Before provider version 1.132.0, it formats as <domain_name>:<function_name>
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// (Available since v1.132.0) The Status of the function.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DomainConfigParameters struct {

	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/cdn/v1alpha1.Domain
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Reference to a Domain in cdn to populate domainName.
	// +kubebuilder:validation:Optional
	DomainNameRef *v1.Reference `json:"domainNameRef,omitempty" tf:"-"`

	// Selector for a Domain in cdn to populate domainName.
	// +kubebuilder:validation:Optional
	DomainNameSelector *v1.Selector `json:"domainNameSelector,omitempty" tf:"-"`

	// The args of the domain config. See function_args below.
	// +kubebuilder:validation:Optional
	FunctionArgs []FunctionArgsParameters `json:"functionArgs,omitempty" tf:"function_args,omitempty"`

	// The name of the domain config.
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
	// +kubebuilder:validation:Optional
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

type FunctionArgsInitParameters struct {

	// The name of arg.
	ArgName *string `json:"argName,omitempty" tf:"arg_name,omitempty"`

	// The value of arg.
	ArgValue *string `json:"argValue,omitempty" tf:"arg_value,omitempty"`
}

type FunctionArgsObservation struct {

	// The name of arg.
	ArgName *string `json:"argName,omitempty" tf:"arg_name,omitempty"`

	// The value of arg.
	ArgValue *string `json:"argValue,omitempty" tf:"arg_value,omitempty"`
}

type FunctionArgsParameters struct {

	// The name of arg.
	// +kubebuilder:validation:Optional
	ArgName *string `json:"argName" tf:"arg_name,omitempty"`

	// The value of arg.
	// +kubebuilder:validation:Optional
	ArgValue *string `json:"argValue" tf:"arg_value,omitempty"`
}

// DomainConfigSpec defines the desired state of DomainConfig
type DomainConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainConfigInitParameters `json:"initProvider,omitempty"`
}

// DomainConfigStatus defines the observed state of DomainConfig.
type DomainConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DomainConfig is the Schema for the DomainConfigs API. Provides a Alicloud Cdn Domain Config resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type DomainConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionArgs) || (has(self.initProvider) && has(self.initProvider.functionArgs))",message="spec.forProvider.functionArgs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionName) || (has(self.initProvider) && has(self.initProvider.functionName))",message="spec.forProvider.functionName is a required parameter"
	Spec   DomainConfigSpec   `json:"spec"`
	Status DomainConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainConfigList contains a list of DomainConfigs
type DomainConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainConfig `json:"items"`
}

// Repository type metadata.
var (
	DomainConfig_Kind             = "DomainConfig"
	DomainConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainConfig_Kind}.String()
	DomainConfig_KindAPIVersion   = DomainConfig_Kind + "." + CRDGroupVersion.String()
	DomainConfig_GroupVersionKind = CRDGroupVersion.WithKind(DomainConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainConfig{}, &DomainConfigList{})
}
