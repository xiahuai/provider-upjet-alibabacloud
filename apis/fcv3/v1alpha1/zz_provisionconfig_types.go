// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProvisionConfigInitParameters struct {

	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCPU *bool `json:"alwaysAllocateCpu,omitempty" tf:"always_allocate_cpu,omitempty"`

	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu *bool `json:"alwaysAllocateGpu,omitempty" tf:"always_allocate_gpu,omitempty"`

	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/fcv3/v1alpha1.Function
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// The function alias or LATEST.
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Timing policy configuration See scheduled_actions below.
	ScheduledActions []ScheduledActionsInitParameters `json:"scheduledActions,omitempty" tf:"scheduled_actions,omitempty"`

	// Number of reserved target resources. The value range is [0,10000].
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// Metric tracking scaling policy configuration See target_tracking_policies below.
	TargetTrackingPolicies []TargetTrackingPoliciesInitParameters `json:"targetTrackingPolicies,omitempty" tf:"target_tracking_policies,omitempty"`
}

type ProvisionConfigObservation struct {

	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCPU *bool `json:"alwaysAllocateCpu,omitempty" tf:"always_allocate_cpu,omitempty"`

	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu *bool `json:"alwaysAllocateGpu,omitempty" tf:"always_allocate_gpu,omitempty"`

	// (Available since v1.234.0) Number of actual resources
	Current *float64 `json:"current,omitempty" tf:"current,omitempty"`

	// (Available since v1.234.0) Error message when a Reserved Instance creation fails
	CurrentError *string `json:"currentError,omitempty" tf:"current_error,omitempty"`

	// (Available since v1.234.0) Resource Description of the function
	FunctionArn *string `json:"functionArn,omitempty" tf:"function_arn,omitempty"`

	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The function alias or LATEST.
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Timing policy configuration See scheduled_actions below.
	ScheduledActions []ScheduledActionsObservation `json:"scheduledActions,omitempty" tf:"scheduled_actions,omitempty"`

	// Number of reserved target resources. The value range is [0,10000].
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// Metric tracking scaling policy configuration See target_tracking_policies below.
	TargetTrackingPolicies []TargetTrackingPoliciesObservation `json:"targetTrackingPolicies,omitempty" tf:"target_tracking_policies,omitempty"`
}

type ProvisionConfigParameters struct {

	// Whether the CPU is always allocated. The default value is true.
	// +kubebuilder:validation:Optional
	AlwaysAllocateCPU *bool `json:"alwaysAllocateCpu,omitempty" tf:"always_allocate_cpu,omitempty"`

	// Whether to always assign GPU to function instance
	// +kubebuilder:validation:Optional
	AlwaysAllocateGpu *bool `json:"alwaysAllocateGpu,omitempty" tf:"always_allocate_gpu,omitempty"`

	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/fcv3/v1alpha1.Function
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// The function alias or LATEST.
	// +kubebuilder:validation:Optional
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Timing policy configuration See scheduled_actions below.
	// +kubebuilder:validation:Optional
	ScheduledActions []ScheduledActionsParameters `json:"scheduledActions,omitempty" tf:"scheduled_actions,omitempty"`

	// Number of reserved target resources. The value range is [0,10000].
	// +kubebuilder:validation:Optional
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// Metric tracking scaling policy configuration See target_tracking_policies below.
	// +kubebuilder:validation:Optional
	TargetTrackingPolicies []TargetTrackingPoliciesParameters `json:"targetTrackingPolicies,omitempty" tf:"target_tracking_policies,omitempty"`
}

type ScheduledActionsInitParameters struct {

	// Policy expiration time
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Policy Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Timing Configuration
	ScheduleExpression *string `json:"scheduleExpression,omitempty" tf:"schedule_expression,omitempty"`

	// Policy effective time
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Number of reserved target resources
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// Time zone.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type ScheduledActionsObservation struct {

	// Policy expiration time
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Policy Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Timing Configuration
	ScheduleExpression *string `json:"scheduleExpression,omitempty" tf:"schedule_expression,omitempty"`

	// Policy effective time
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Number of reserved target resources
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// Time zone.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type ScheduledActionsParameters struct {

	// Policy expiration time
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Policy Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Timing Configuration
	// +kubebuilder:validation:Optional
	ScheduleExpression *string `json:"scheduleExpression,omitempty" tf:"schedule_expression,omitempty"`

	// Policy effective time
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Number of reserved target resources
	// +kubebuilder:validation:Optional
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// Time zone.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type TargetTrackingPoliciesInitParameters struct {

	// Policy expiration time
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Maximum value of expansion
	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity,omitempty"`

	// Tracking value of the indicator
	MetricTarget *float64 `json:"metricTarget,omitempty" tf:"metric_target,omitempty"`

	// Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// Minimum Shrinkage
	MinCapacity *float64 `json:"minCapacity,omitempty" tf:"min_capacity,omitempty"`

	// Policy Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Policy Effective Time
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Time zone.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type TargetTrackingPoliciesObservation struct {

	// Policy expiration time
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Maximum value of expansion
	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity,omitempty"`

	// Tracking value of the indicator
	MetricTarget *float64 `json:"metricTarget,omitempty" tf:"metric_target,omitempty"`

	// Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// Minimum Shrinkage
	MinCapacity *float64 `json:"minCapacity,omitempty" tf:"min_capacity,omitempty"`

	// Policy Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Policy Effective Time
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Time zone.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type TargetTrackingPoliciesParameters struct {

	// Policy expiration time
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Maximum value of expansion
	// +kubebuilder:validation:Optional
	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity,omitempty"`

	// Tracking value of the indicator
	// +kubebuilder:validation:Optional
	MetricTarget *float64 `json:"metricTarget,omitempty" tf:"metric_target,omitempty"`

	// Provisionedconcurrency utilization: Concurrency utilization of reserved mode instances. CPU utilization: CPU utilization. GPUMemUtilization:GPU utilization
	// +kubebuilder:validation:Optional
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// Minimum Shrinkage
	// +kubebuilder:validation:Optional
	MinCapacity *float64 `json:"minCapacity,omitempty" tf:"min_capacity,omitempty"`

	// Policy Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Policy Effective Time
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Time zone.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

// ProvisionConfigSpec defines the desired state of ProvisionConfig
type ProvisionConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProvisionConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProvisionConfigInitParameters `json:"initProvider,omitempty"`
}

// ProvisionConfigStatus defines the observed state of ProvisionConfig.
type ProvisionConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProvisionConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProvisionConfig is the Schema for the ProvisionConfigs API. Provides a Alicloud FCV3 Provision Config resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type ProvisionConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProvisionConfigSpec   `json:"spec"`
	Status            ProvisionConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProvisionConfigList contains a list of ProvisionConfigs
type ProvisionConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProvisionConfig `json:"items"`
}

// Repository type metadata.
var (
	ProvisionConfig_Kind             = "ProvisionConfig"
	ProvisionConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProvisionConfig_Kind}.String()
	ProvisionConfig_KindAPIVersion   = ProvisionConfig_Kind + "." + CRDGroupVersion.String()
	ProvisionConfig_GroupVersionKind = CRDGroupVersion.WithKind(ProvisionConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ProvisionConfig{}, &ProvisionConfigList{})
}
