// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1"
	v1alpha12 "github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AutoscalingConfig.
func (mg *AutoscalingConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClusterIDRefs,
		Selector:     mg.Spec.ForProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ManagedKubernetesList{},
			Managed: &ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRefs = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ClusterIDRefs,
		Selector:     mg.Spec.InitProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ManagedKubernetesList{},
			Managed: &ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRefs = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EdgeKubernetes.
func (mg *EdgeKubernetes) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.WorkerVswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.WorkerVswitchIDsRefs,
		Selector:      mg.Spec.ForProvider.WorkerVswitchIDsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkerVswitchIds")
	}
	mg.Spec.ForProvider.WorkerVswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.WorkerVswitchIDsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupID")
	}
	mg.Spec.InitProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurityGroupIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.WorkerVswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.WorkerVswitchIDsRefs,
		Selector:      mg.Spec.InitProvider.WorkerVswitchIDsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkerVswitchIds")
	}
	mg.Spec.InitProvider.WorkerVswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.WorkerVswitchIDsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Kubernetes.
func (mg *Kubernetes) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.MasterVswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.MasterVswitchIdsRefs,
		Selector:      mg.Spec.ForProvider.MasterVswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MasterVswitchIds")
	}
	mg.Spec.ForProvider.MasterVswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.MasterVswitchIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.PodVswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.PodVswitchIdsRefs,
		Selector:      mg.Spec.ForProvider.PodVswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PodVswitchIds")
	}
	mg.Spec.ForProvider.PodVswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.PodVswitchIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VswitchIDRef,
		Selector:     mg.Spec.ForProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchID")
	}
	mg.Spec.ForProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VswitchIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VswitchIDsRefs,
		Selector:      mg.Spec.ForProvider.VswitchIDsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchIds")
	}
	mg.Spec.ForProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VswitchIDsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.MasterVswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.MasterVswitchIdsRefs,
		Selector:      mg.Spec.InitProvider.MasterVswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MasterVswitchIds")
	}
	mg.Spec.InitProvider.MasterVswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.MasterVswitchIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.PodVswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.PodVswitchIdsRefs,
		Selector:      mg.Spec.InitProvider.PodVswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PodVswitchIds")
	}
	mg.Spec.InitProvider.PodVswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.PodVswitchIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupID")
	}
	mg.Spec.InitProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VswitchIDRef,
		Selector:     mg.Spec.InitProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchID")
	}
	mg.Spec.InitProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VswitchIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.VswitchIDsRefs,
		Selector:      mg.Spec.InitProvider.VswitchIDsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchIds")
	}
	mg.Spec.InitProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.VswitchIDsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this KubernetesAddon.
func (mg *KubernetesAddon) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClusterIDRefs,
		Selector:     mg.Spec.ForProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ManagedKubernetesList{},
			Managed: &ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRefs = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ClusterIDRefs,
		Selector:     mg.Spec.InitProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ManagedKubernetesList{},
			Managed: &ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRefs = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this KubernetesNodePool.
func (mg *KubernetesNodePool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClusterIDRefs,
		Selector:     mg.Spec.ForProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ManagedKubernetesList{},
			Managed: &ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRefs = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KeyNameRef,
		Selector:     mg.Spec.ForProvider.KeyNameSelector,
		To: reference.To{
			List:    &v1alpha1.KeyPairList{},
			Managed: &v1alpha1.KeyPair{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyName")
	}
	mg.Spec.ForProvider.KeyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupIds")
	}
	mg.Spec.ForProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VswitchIdsRefs,
		Selector:      mg.Spec.ForProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchIds")
	}
	mg.Spec.ForProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ClusterIDRefs,
		Selector:     mg.Spec.InitProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ManagedKubernetesList{},
			Managed: &ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRefs = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.KeyNameRef,
		Selector:     mg.Spec.InitProvider.KeyNameSelector,
		To: reference.To{
			List:    &v1alpha1.KeyPairList{},
			Managed: &v1alpha1.KeyPair{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyName")
	}
	mg.Spec.InitProvider.KeyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.SecurityGroupIDRefs,
		Selector:      mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupIds")
	}
	mg.Spec.InitProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.VswitchIdsRefs,
		Selector:      mg.Spec.InitProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchIds")
	}
	mg.Spec.InitProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this KubernetesPermissions.
func (mg *KubernetesPermissions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].Cluster),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].ClusterIDRefs,
			Selector:     mg.Spec.ForProvider.Permissions[i3].ClusterIDSelector,
			To: reference.To{
				List:    &ManagedKubernetesList{},
				Managed: &ManagedKubernetes{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].Cluster")
		}
		mg.Spec.ForProvider.Permissions[i3].Cluster = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].ClusterIDRefs = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].RoleName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].RoleIDRefs,
			Selector:     mg.Spec.ForProvider.Permissions[i3].RoleIDSelector,
			To: reference.To{
				List:    &v1alpha12.RoleList{},
				Managed: &v1alpha12.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].RoleName")
		}
		mg.Spec.ForProvider.Permissions[i3].RoleName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].RoleIDRefs = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UIDRef,
		Selector:     mg.Spec.ForProvider.UIDSelector,
		To: reference.To{
			List:    &v1alpha12.UserList{},
			Managed: &v1alpha12.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UID")
	}
	mg.Spec.ForProvider.UID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].Cluster),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].ClusterIDRefs,
			Selector:     mg.Spec.InitProvider.Permissions[i3].ClusterIDSelector,
			To: reference.To{
				List:    &ManagedKubernetesList{},
				Managed: &ManagedKubernetes{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].Cluster")
		}
		mg.Spec.InitProvider.Permissions[i3].Cluster = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].ClusterIDRefs = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].RoleName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].RoleIDRefs,
			Selector:     mg.Spec.InitProvider.Permissions[i3].RoleIDSelector,
			To: reference.To{
				List:    &v1alpha12.RoleList{},
				Managed: &v1alpha12.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].RoleName")
		}
		mg.Spec.InitProvider.Permissions[i3].RoleName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].RoleIDRefs = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UIDRef,
		Selector:     mg.Spec.InitProvider.UIDSelector,
		To: reference.To{
			List:    &v1alpha12.UserList{},
			Managed: &v1alpha12.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UID")
	}
	mg.Spec.InitProvider.UID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedKubernetes.
func (mg *ManagedKubernetes) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VswitchIdsRefs,
		Selector:      mg.Spec.ForProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchIds")
	}
	mg.Spec.ForProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupID")
	}
	mg.Spec.InitProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurityGroupIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.VswitchIdsRefs,
		Selector:      mg.Spec.InitProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchIds")
	}
	mg.Spec.InitProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this ServerlessKubernetes.
func (mg *ServerlessKubernetes) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha11.VPCList{},
			Managed: &v1alpha11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VswitchIDRef,
		Selector:     mg.Spec.ForProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchID")
	}
	mg.Spec.ForProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VswitchIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VswitchIdsRefs,
		Selector:      mg.Spec.ForProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchIds")
	}
	mg.Spec.ForProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupID")
	}
	mg.Spec.InitProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha11.VPCList{},
			Managed: &v1alpha11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VswitchIDRef,
		Selector:     mg.Spec.InitProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchID")
	}
	mg.Spec.InitProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VswitchIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VswitchIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.VswitchIdsRefs,
		Selector:      mg.Spec.InitProvider.VswitchIdsSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchIds")
	}
	mg.Spec.InitProvider.VswitchIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.VswitchIdsRefs = mrsp.ResolvedReferences

	return nil
}
