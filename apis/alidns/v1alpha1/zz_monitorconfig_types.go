// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IspCityNodeInitParameters struct {

	// The code of the city node to monitor.
	CityCode *string `json:"cityCode,omitempty" tf:"city_code,omitempty"`

	// The code of the Internet provider service (ISP) node to monitor.
	IspCode *string `json:"ispCode,omitempty" tf:"isp_code,omitempty"`
}

type IspCityNodeObservation struct {

	// The code of the city node to monitor.
	CityCode *string `json:"cityCode,omitempty" tf:"city_code,omitempty"`

	// The code of the Internet provider service (ISP) node to monitor.
	IspCode *string `json:"ispCode,omitempty" tf:"isp_code,omitempty"`
}

type IspCityNodeParameters struct {

	// The code of the city node to monitor.
	// +kubebuilder:validation:Optional
	CityCode *string `json:"cityCode" tf:"city_code,omitempty"`

	// The code of the Internet provider service (ISP) node to monitor.
	// +kubebuilder:validation:Optional
	IspCode *string `json:"ispCode" tf:"isp_code,omitempty"`
}

type MonitorConfigInitParameters struct {

	// The ID of the address pool.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/alidns/v1alpha1.AddressPool
	AddrPoolID *string `json:"addrPoolId,omitempty" tf:"addr_pool_id,omitempty"`

	// Reference to a AddressPool in alidns to populate addrPoolId.
	// +kubebuilder:validation:Optional
	AddrPoolIDRef *v1.Reference `json:"addrPoolIdRef,omitempty" tf:"-"`

	// Selector for a AddressPool in alidns to populate addrPoolId.
	// +kubebuilder:validation:Optional
	AddrPoolIDSelector *v1.Selector `json:"addrPoolIdSelector,omitempty" tf:"-"`

	// The number of consecutive times of failed health check attempts. Valid values: 1, 2, 3.
	EvaluationCount *float64 `json:"evaluationCount,omitempty" tf:"evaluation_count,omitempty"`

	// The health check interval. Unit: seconds. Valid values: 60.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The Monitoring node. See isp_city_node below for details.
	IspCityNode []IspCityNodeInitParameters `json:"ispCityNode,omitempty" tf:"isp_city_node,omitempty"`

	// The lang.
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// The extended information. This value follows the json format. For more details, see the description of MonitorExtendInfo in the Request parameters table for details.
	MonitorExtendInfo *string `json:"monitorExtendInfo,omitempty" tf:"monitor_extend_info,omitempty"`

	// The health check protocol. Valid values: HTTP, HTTPS, PING, TCP.
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// The timeout period. Unit: milliseconds. Valid values: 2000, 3000, 5000, 10000.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type MonitorConfigObservation struct {

	// The ID of the address pool.
	AddrPoolID *string `json:"addrPoolId,omitempty" tf:"addr_pool_id,omitempty"`

	// The number of consecutive times of failed health check attempts. Valid values: 1, 2, 3.
	EvaluationCount *float64 `json:"evaluationCount,omitempty" tf:"evaluation_count,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The health check interval. Unit: seconds. Valid values: 60.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The Monitoring node. See isp_city_node below for details.
	IspCityNode []IspCityNodeObservation `json:"ispCityNode,omitempty" tf:"isp_city_node,omitempty"`

	// The lang.
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// The extended information. This value follows the json format. For more details, see the description of MonitorExtendInfo in the Request parameters table for details.
	MonitorExtendInfo *string `json:"monitorExtendInfo,omitempty" tf:"monitor_extend_info,omitempty"`

	// The health check protocol. Valid values: HTTP, HTTPS, PING, TCP.
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// The timeout period. Unit: milliseconds. Valid values: 2000, 3000, 5000, 10000.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type MonitorConfigParameters struct {

	// The ID of the address pool.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/alidns/v1alpha1.AddressPool
	// +kubebuilder:validation:Optional
	AddrPoolID *string `json:"addrPoolId,omitempty" tf:"addr_pool_id,omitempty"`

	// Reference to a AddressPool in alidns to populate addrPoolId.
	// +kubebuilder:validation:Optional
	AddrPoolIDRef *v1.Reference `json:"addrPoolIdRef,omitempty" tf:"-"`

	// Selector for a AddressPool in alidns to populate addrPoolId.
	// +kubebuilder:validation:Optional
	AddrPoolIDSelector *v1.Selector `json:"addrPoolIdSelector,omitempty" tf:"-"`

	// The number of consecutive times of failed health check attempts. Valid values: 1, 2, 3.
	// +kubebuilder:validation:Optional
	EvaluationCount *float64 `json:"evaluationCount,omitempty" tf:"evaluation_count,omitempty"`

	// The health check interval. Unit: seconds. Valid values: 60.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The Monitoring node. See isp_city_node below for details.
	// +kubebuilder:validation:Optional
	IspCityNode []IspCityNodeParameters `json:"ispCityNode,omitempty" tf:"isp_city_node,omitempty"`

	// The lang.
	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// The extended information. This value follows the json format. For more details, see the description of MonitorExtendInfo in the Request parameters table for details.
	// +kubebuilder:validation:Optional
	MonitorExtendInfo *string `json:"monitorExtendInfo,omitempty" tf:"monitor_extend_info,omitempty"`

	// The health check protocol. Valid values: HTTP, HTTPS, PING, TCP.
	// +kubebuilder:validation:Optional
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The timeout period. Unit: milliseconds. Valid values: 2000, 3000, 5000, 10000.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

// MonitorConfigSpec defines the desired state of MonitorConfig
type MonitorConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorConfigInitParameters `json:"initProvider,omitempty"`
}

// MonitorConfigStatus defines the observed state of MonitorConfig.
type MonitorConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MonitorConfig is the Schema for the MonitorConfigs API. Provides a Alicloud DNS Monitor Config resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type MonitorConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.evaluationCount) || (has(self.initProvider) && has(self.initProvider.evaluationCount))",message="spec.forProvider.evaluationCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.interval) || (has(self.initProvider) && has(self.initProvider.interval))",message="spec.forProvider.interval is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ispCityNode) || (has(self.initProvider) && has(self.initProvider.ispCityNode))",message="spec.forProvider.ispCityNode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.monitorExtendInfo) || (has(self.initProvider) && has(self.initProvider.monitorExtendInfo))",message="spec.forProvider.monitorExtendInfo is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocolType) || (has(self.initProvider) && has(self.initProvider.protocolType))",message="spec.forProvider.protocolType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeout) || (has(self.initProvider) && has(self.initProvider.timeout))",message="spec.forProvider.timeout is a required parameter"
	Spec   MonitorConfigSpec   `json:"spec"`
	Status MonitorConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorConfigList contains a list of MonitorConfigs
type MonitorConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorConfig `json:"items"`
}

// Repository type metadata.
var (
	MonitorConfig_Kind             = "MonitorConfig"
	MonitorConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorConfig_Kind}.String()
	MonitorConfig_KindAPIVersion   = MonitorConfig_Kind + "." + CRDGroupVersion.String()
	MonitorConfig_GroupVersionKind = CRDGroupVersion.WithKind(MonitorConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorConfig{}, &MonitorConfigList{})
}
