// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketCnameInitParameters struct {

	// The bucket to which the custom domain name belongs
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The container for the certificate configuration. See certificate below.
	Certificate []CertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether to delete the certificate.
	DeleteCertificate *bool `json:"deleteCertificate,omitempty" tf:"delete_certificate,omitempty"`

	// User-defined domain name
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/alidns/v1alpha1.Record
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("domain_name",false)
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Reference to a Record in alidns to populate domain.
	// +kubebuilder:validation:Optional
	DomainRef *v1.Reference `json:"domainRef,omitempty" tf:"-"`

	// Selector for a Record in alidns to populate domain.
	// +kubebuilder:validation:Optional
	DomainSelector *v1.Selector `json:"domainSelector,omitempty" tf:"-"`

	// Whether to force overwrite certificate.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertID *string `json:"previousCertId,omitempty" tf:"previous_cert_id,omitempty"`
}

type BucketCnameObservation struct {

	// The bucket to which the custom domain name belongs
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The container for the certificate configuration. See certificate below.
	Certificate []CertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether to delete the certificate.
	DeleteCertificate *bool `json:"deleteCertificate,omitempty" tf:"delete_certificate,omitempty"`

	// User-defined domain name
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Whether to force overwrite certificate.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The ID of the resource supplied above.The value is formulated as <bucket>:<domain>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertID *string `json:"previousCertId,omitempty" tf:"previous_cert_id,omitempty"`

	// Certificate Status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BucketCnameParameters struct {

	// The bucket to which the custom domain name belongs
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The container for the certificate configuration. See certificate below.
	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether to delete the certificate.
	// +kubebuilder:validation:Optional
	DeleteCertificate *bool `json:"deleteCertificate,omitempty" tf:"delete_certificate,omitempty"`

	// User-defined domain name
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/alidns/v1alpha1.Record
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("domain_name",false)
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Reference to a Record in alidns to populate domain.
	// +kubebuilder:validation:Optional
	DomainRef *v1.Reference `json:"domainRef,omitempty" tf:"-"`

	// Selector for a Record in alidns to populate domain.
	// +kubebuilder:validation:Optional
	DomainSelector *v1.Selector `json:"domainSelector,omitempty" tf:"-"`

	// Whether to force overwrite certificate.
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	// +kubebuilder:validation:Optional
	PreviousCertID *string `json:"previousCertId,omitempty" tf:"previous_cert_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

type CertificateInitParameters struct {

	// Certificate Identifier
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// The certificate public key.
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// The certificate private key.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`
}

type CertificateObservation struct {

	// Certificate Identifier
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// Certificate creation time
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// Certificate Fingerprint
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// Certificate Status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Certificate Type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Certificate validity period end time
	ValidEndDate *string `json:"validEndDate,omitempty" tf:"valid_end_date,omitempty"`

	// Certificate validity period start time
	ValidStartDate *string `json:"validStartDate,omitempty" tf:"valid_start_date,omitempty"`
}

type CertificateParameters struct {

	// Certificate Identifier
	// +kubebuilder:validation:Optional
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// The certificate public key.
	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// The certificate private key.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`
}

// BucketCnameSpec defines the desired state of BucketCname
type BucketCnameSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketCnameParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketCnameInitParameters `json:"initProvider,omitempty"`
}

// BucketCnameStatus defines the observed state of BucketCname.
type BucketCnameStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketCnameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketCname is the Schema for the BucketCnames API. Provides a Alicloud OSS Bucket Cname resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type BucketCname struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketCnameSpec   `json:"spec"`
	Status            BucketCnameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketCnameList contains a list of BucketCnames
type BucketCnameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketCname `json:"items"`
}

// Repository type metadata.
var (
	BucketCname_Kind             = "BucketCname"
	BucketCname_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketCname_Kind}.String()
	BucketCname_KindAPIVersion   = BucketCname_Kind + "." + CRDGroupVersion.String()
	BucketCname_GroupVersionKind = CRDGroupVersion.WithKind(BucketCname_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketCname{}, &BucketCnameList{})
}
