// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	common "github.com/crossplane-contrib/provider-alibabacloud/config/common"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Listener.
func (mg *Listener) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ACLIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.ACLIdsRefs,
		Selector:      mg.Spec.ForProvider.ACLIdsSelector,
		To: reference.To{
			List:    &ACLList{},
			Managed: &ACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ACLIds")
	}
	mg.Spec.ForProvider.ACLIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ACLIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ACLIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.ACLIdsRefs,
		Selector:      mg.Spec.InitProvider.ACLIdsSelector,
		To: reference.To{
			List:    &ACLList{},
			Managed: &ACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ACLIds")
	}
	mg.Spec.InitProvider.ACLIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ACLIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadBalancerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.InitProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerID")
	}
	mg.Spec.InitProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LoadBalancer.
func (mg *LoadBalancer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MasterZoneID),
		Extract:      common.VSwitchZoneIdExtractor(),
		Reference:    mg.Spec.ForProvider.MasterZoneIDRef,
		Selector:     mg.Spec.ForProvider.MasterZoneIDSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MasterZoneID")
	}
	mg.Spec.ForProvider.MasterZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MasterZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SlaveZoneID),
		Extract:      common.VSwitchZoneIdExtractor(),
		Reference:    mg.Spec.ForProvider.SlaveZoneIDRef,
		Selector:     mg.Spec.ForProvider.SlaveZoneIDSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SlaveZoneID")
	}
	mg.Spec.ForProvider.SlaveZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SlaveZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VswitchIDRef,
		Selector:     mg.Spec.ForProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchID")
	}
	mg.Spec.ForProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VswitchIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MasterZoneID),
		Extract:      common.VSwitchZoneIdExtractor(),
		Reference:    mg.Spec.InitProvider.MasterZoneIDRef,
		Selector:     mg.Spec.InitProvider.MasterZoneIDSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MasterZoneID")
	}
	mg.Spec.InitProvider.MasterZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MasterZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SlaveZoneID),
		Extract:      common.VSwitchZoneIdExtractor(),
		Reference:    mg.Spec.InitProvider.SlaveZoneIDRef,
		Selector:     mg.Spec.InitProvider.SlaveZoneIDSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SlaveZoneID")
	}
	mg.Spec.InitProvider.SlaveZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SlaveZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VswitchIDRef,
		Selector:     mg.Spec.InitProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha1.VswitchList{},
			Managed: &v1alpha1.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchID")
	}
	mg.Spec.InitProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VswitchIDRef = rsp.ResolvedReference

	return nil
}
