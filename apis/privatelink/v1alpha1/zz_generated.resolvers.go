// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha12 "github.com/crossplane-contrib/provider-alibabacloud/apis/alb/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1"
	v1alpha13 "github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this VpcEndpoint.
func (mg *VpcEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupIds")
	}
	mg.Spec.ForProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceIDRef,
		Selector:     mg.Spec.ForProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceID")
	}
	mg.Spec.ForProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha11.VPCList{},
			Managed: &v1alpha11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.SecurityGroupRefs,
		Selector:      mg.Spec.InitProvider.SecurityGroupSelector,
		To: reference.To{
			List:    &v1alpha1.SecurityGroupList{},
			Managed: &v1alpha1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupIds")
	}
	mg.Spec.InitProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SecurityGroupRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceIDRef,
		Selector:     mg.Spec.InitProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceID")
	}
	mg.Spec.InitProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha11.VPCList{},
			Managed: &v1alpha11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VpcEndpointConnection.
func (mg *VpcEndpointConnection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EndpointID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EndpointIDRef,
		Selector:     mg.Spec.ForProvider.EndpointIDSelector,
		To: reference.To{
			List:    &VpcEndpointList{},
			Managed: &VpcEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EndpointID")
	}
	mg.Spec.ForProvider.EndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EndpointIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceIDRef,
		Selector:     mg.Spec.ForProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceID")
	}
	mg.Spec.ForProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EndpointID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.EndpointIDRef,
		Selector:     mg.Spec.InitProvider.EndpointIDSelector,
		To: reference.To{
			List:    &VpcEndpointList{},
			Managed: &VpcEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EndpointID")
	}
	mg.Spec.InitProvider.EndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EndpointIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceIDRef,
		Selector:     mg.Spec.InitProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceID")
	}
	mg.Spec.InitProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VpcEndpointServiceResource.
func (mg *VpcEndpointServiceResource) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &v1alpha12.LoadBalancerList{},
			Managed: &v1alpha12.LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceIDRef,
		Selector:     mg.Spec.ForProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceID")
	}
	mg.Spec.ForProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ResourceIDRef,
		Selector:     mg.Spec.InitProvider.ResourceIDSelector,
		To: reference.To{
			List:    &v1alpha12.LoadBalancerList{},
			Managed: &v1alpha12.LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceID")
	}
	mg.Spec.InitProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceIDRef,
		Selector:     mg.Spec.InitProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceID")
	}
	mg.Spec.InitProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VpcEndpointServiceUser.
func (mg *VpcEndpointServiceUser) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceIDRef,
		Selector:     mg.Spec.ForProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceID")
	}
	mg.Spec.ForProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &v1alpha13.UserList{},
			Managed: &v1alpha13.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceIDRef,
		Selector:     mg.Spec.InitProvider.ServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceID")
	}
	mg.Spec.InitProvider.ServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &v1alpha13.UserList{},
			Managed: &v1alpha13.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VpcEndpointZone.
func (mg *VpcEndpointZone) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EndpointID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EndpointIDRef,
		Selector:     mg.Spec.ForProvider.EndpointIDSelector,
		To: reference.To{
			List:    &VpcEndpointList{},
			Managed: &VpcEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EndpointID")
	}
	mg.Spec.ForProvider.EndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EndpointIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VswitchIDRef,
		Selector:     mg.Spec.ForProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VswitchID")
	}
	mg.Spec.ForProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VswitchIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EndpointID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.EndpointIDRef,
		Selector:     mg.Spec.InitProvider.EndpointIDSelector,
		To: reference.To{
			List:    &VpcEndpointList{},
			Managed: &VpcEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EndpointID")
	}
	mg.Spec.InitProvider.EndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EndpointIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VswitchID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VswitchIDRef,
		Selector:     mg.Spec.InitProvider.VswitchIDSelector,
		To: reference.To{
			List:    &v1alpha11.VswitchList{},
			Managed: &v1alpha11.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VswitchID")
	}
	mg.Spec.InitProvider.VswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VswitchIDRef = rsp.ResolvedReference

	return nil
}
