// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FcTriggerInitParameters struct {

	// The name of the Event.
	EventMetaName *string `json:"eventMetaName,omitempty" tf:"event_meta_name,omitempty"`

	// The version of the Event.
	EventMetaVersion *string `json:"eventMetaVersion,omitempty" tf:"event_meta_version,omitempty"`

	// The function arn. The value formats as acs:fc:{RegionID}:{AccountID}:{Filter}.
	FunctionArn *string `json:"functionArn,omitempty" tf:"function_arn,omitempty"`

	// The Note information.
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// The role authorized by RAM. The value formats as acs:ram::{AccountID}:role/{RoleName}.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.RoleArnExtractor()
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in ram to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in ram to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Resources and filters for event listening. The value formats as acs:cdn:{RegionID}:{AccountID}:{Filter}.
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// The trigger corresponding to the function Compute Service. The value formats as acs:fc:{RegionID}:{AccountID}:{Filter}. See Create a CDN Fc Trigger for more details.
	TriggerArn *string `json:"triggerArn,omitempty" tf:"trigger_arn,omitempty"`
}

type FcTriggerObservation struct {

	// The name of the Event.
	EventMetaName *string `json:"eventMetaName,omitempty" tf:"event_meta_name,omitempty"`

	// The version of the Event.
	EventMetaVersion *string `json:"eventMetaVersion,omitempty" tf:"event_meta_version,omitempty"`

	// The function arn. The value formats as acs:fc:{RegionID}:{AccountID}:{Filter}.
	FunctionArn *string `json:"functionArn,omitempty" tf:"function_arn,omitempty"`

	// Its value is same as trigger_arn.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Note information.
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// The role authorized by RAM. The value formats as acs:ram::{AccountID}:role/{RoleName}.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Resources and filters for event listening. The value formats as acs:cdn:{RegionID}:{AccountID}:{Filter}.
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// The trigger corresponding to the function Compute Service. The value formats as acs:fc:{RegionID}:{AccountID}:{Filter}. See Create a CDN Fc Trigger for more details.
	TriggerArn *string `json:"triggerArn,omitempty" tf:"trigger_arn,omitempty"`
}

type FcTriggerParameters struct {

	// The name of the Event.
	// +kubebuilder:validation:Optional
	EventMetaName *string `json:"eventMetaName,omitempty" tf:"event_meta_name,omitempty"`

	// The version of the Event.
	// +kubebuilder:validation:Optional
	EventMetaVersion *string `json:"eventMetaVersion,omitempty" tf:"event_meta_version,omitempty"`

	// The function arn. The value formats as acs:fc:{RegionID}:{AccountID}:{Filter}.
	// +kubebuilder:validation:Optional
	FunctionArn *string `json:"functionArn,omitempty" tf:"function_arn,omitempty"`

	// The Note information.
	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The role authorized by RAM. The value formats as acs:ram::{AccountID}:role/{RoleName}.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.RoleArnExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in ram to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in ram to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Resources and filters for event listening. The value formats as acs:cdn:{RegionID}:{AccountID}:{Filter}.
	// +kubebuilder:validation:Optional
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// The trigger corresponding to the function Compute Service. The value formats as acs:fc:{RegionID}:{AccountID}:{Filter}. See Create a CDN Fc Trigger for more details.
	// +kubebuilder:validation:Optional
	TriggerArn *string `json:"triggerArn,omitempty" tf:"trigger_arn,omitempty"`
}

// FcTriggerSpec defines the desired state of FcTrigger
type FcTriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FcTriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FcTriggerInitParameters `json:"initProvider,omitempty"`
}

// FcTriggerStatus defines the observed state of FcTrigger.
type FcTriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FcTriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FcTrigger is the Schema for the FcTriggers API. Provides a Alicloud CDN Fc Trigger resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type FcTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventMetaName) || (has(self.initProvider) && has(self.initProvider.eventMetaName))",message="spec.forProvider.eventMetaName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventMetaVersion) || (has(self.initProvider) && has(self.initProvider.eventMetaVersion))",message="spec.forProvider.eventMetaVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notes) || (has(self.initProvider) && has(self.initProvider.notes))",message="spec.forProvider.notes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceArn) || (has(self.initProvider) && has(self.initProvider.sourceArn))",message="spec.forProvider.sourceArn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.triggerArn) || (has(self.initProvider) && has(self.initProvider.triggerArn))",message="spec.forProvider.triggerArn is a required parameter"
	Spec   FcTriggerSpec   `json:"spec"`
	Status FcTriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FcTriggerList contains a list of FcTriggers
type FcTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FcTrigger `json:"items"`
}

// Repository type metadata.
var (
	FcTrigger_Kind             = "FcTrigger"
	FcTrigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FcTrigger_Kind}.String()
	FcTrigger_KindAPIVersion   = FcTrigger_Kind + "." + CRDGroupVersion.String()
	FcTrigger_GroupVersionKind = CRDGroupVersion.WithKind(FcTrigger_Kind)
)

func init() {
	SchemeBuilder.Register(&FcTrigger{}, &FcTriggerList{})
}
