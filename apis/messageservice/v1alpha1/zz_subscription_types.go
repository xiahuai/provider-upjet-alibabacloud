// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionDlqPolicyInitParameters struct {

	// The queue to which dead-letter messages are delivered.
	DeadLetterTargetQueue *string `json:"deadLetterTargetQueue,omitempty" tf:"dead_letter_target_queue,omitempty"`

	// Specifies whether to enable the dead-letter message delivery. Valid values: true, false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SubscriptionDlqPolicyObservation struct {

	// The queue to which dead-letter messages are delivered.
	DeadLetterTargetQueue *string `json:"deadLetterTargetQueue,omitempty" tf:"dead_letter_target_queue,omitempty"`

	// Specifies whether to enable the dead-letter message delivery. Valid values: true, false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SubscriptionDlqPolicyParameters struct {

	// The queue to which dead-letter messages are delivered.
	// +kubebuilder:validation:Optional
	DeadLetterTargetQueue *string `json:"deadLetterTargetQueue,omitempty" tf:"dead_letter_target_queue,omitempty"`

	// Specifies whether to enable the dead-letter message delivery. Valid values: true, false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SubscriptionInitParameters struct {

	// The dead-letter queue policy. See dlq_policy below.
	DlqPolicy []SubscriptionDlqPolicyInitParameters `json:"dlqPolicy,omitempty" tf:"dlq_policy,omitempty"`

	// The endpoint has three format. Available values format:
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag *string `json:"filterTag,omitempty" tf:"filter_tag,omitempty"`

	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: XML, JSON and SIMPLIFIED. Default value: XML.
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: BACKOFF_RETRY. Valid values:
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// The Push type of Subscription. The Valid values: http, queue, mpush, alisms and email.
	PushType *string `json:"pushType,omitempty" tf:"push_type,omitempty"`

	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/messageservice/v1alpha1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Reference to a Topic in messageservice to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameRef *v1.Reference `json:"topicNameRef,omitempty" tf:"-"`

	// Selector for a Topic in messageservice to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameSelector *v1.Selector `json:"topicNameSelector,omitempty" tf:"-"`
}

type SubscriptionObservation struct {

	// (Available since v1.244.0) The time when the subscription was created.
	CreateTime *float64 `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The dead-letter queue policy. See dlq_policy below.
	DlqPolicy []SubscriptionDlqPolicyObservation `json:"dlqPolicy,omitempty" tf:"dlq_policy,omitempty"`

	// The endpoint has three format. Available values format:
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag *string `json:"filterTag,omitempty" tf:"filter_tag,omitempty"`

	// The value formats as <topic_name>:<subscription_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: XML, JSON and SIMPLIFIED. Default value: XML.
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: BACKOFF_RETRY. Valid values:
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// The Push type of Subscription. The Valid values: http, queue, mpush, alisms and email.
	PushType *string `json:"pushType,omitempty" tf:"push_type,omitempty"`

	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type SubscriptionParameters struct {

	// The dead-letter queue policy. See dlq_policy below.
	// +kubebuilder:validation:Optional
	DlqPolicy []SubscriptionDlqPolicyParameters `json:"dlqPolicy,omitempty" tf:"dlq_policy,omitempty"`

	// The endpoint has three format. Available values format:
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	// +kubebuilder:validation:Optional
	FilterTag *string `json:"filterTag,omitempty" tf:"filter_tag,omitempty"`

	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: XML, JSON and SIMPLIFIED. Default value: XML.
	// +kubebuilder:validation:Optional
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: BACKOFF_RETRY. Valid values:
	// +kubebuilder:validation:Optional
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// The Push type of Subscription. The Valid values: http, queue, mpush, alisms and email.
	// +kubebuilder:validation:Optional
	PushType *string `json:"pushType,omitempty" tf:"push_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	// +kubebuilder:validation:Optional
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/messageservice/v1alpha1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.IdExtractor()
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Reference to a Topic in messageservice to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameRef *v1.Reference `json:"topicNameRef,omitempty" tf:"-"`

	// Selector for a Topic in messageservice to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameSelector *v1.Selector `json:"topicNameSelector,omitempty" tf:"-"`
}

// SubscriptionSpec defines the desired state of Subscription
type SubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionStatus defines the observed state of Subscription.
type SubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subscription is the Schema for the Subscriptions API. Provides a Alicloud Message Service Subscription resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Subscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pushType) || (has(self.initProvider) && has(self.initProvider.pushType))",message="spec.forProvider.pushType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionName) || (has(self.initProvider) && has(self.initProvider.subscriptionName))",message="spec.forProvider.subscriptionName is a required parameter"
	Spec   SubscriptionSpec   `json:"spec"`
	Status SubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionList contains a list of Subscriptions
type SubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subscription `json:"items"`
}

// Repository type metadata.
var (
	Subscription_Kind             = "Subscription"
	Subscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subscription_Kind}.String()
	Subscription_KindAPIVersion   = Subscription_Kind + "." + CRDGroupVersion.String()
	Subscription_GroupVersionKind = CRDGroupVersion.WithKind(Subscription_Kind)
)

func init() {
	SchemeBuilder.Register(&Subscription{}, &SubscriptionList{})
}
