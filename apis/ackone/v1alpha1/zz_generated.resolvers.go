// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha11 "github.com/crossplane-contrib/provider-alibabacloud/apis/ack/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-alibabacloud/apis/vpc/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Cluster.
func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].VPCID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Network[i3].VPCIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].VPCIDSelector,
			To: reference.To{
				List:    &v1alpha1.VPCList{},
				Managed: &v1alpha1.VPC{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].VPCID")
		}
		mg.Spec.ForProvider.Network[i3].VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].VPCIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Network[i3].Vswitches),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.Network[i3].VswitchesRefs,
			Selector:      mg.Spec.ForProvider.Network[i3].VswitchesSelector,
			To: reference.To{
				List:    &v1alpha1.VswitchList{},
				Managed: &v1alpha1.Vswitch{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].Vswitches")
		}
		mg.Spec.ForProvider.Network[i3].Vswitches = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Network[i3].VswitchesRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].VPCID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Network[i3].VPCIDRef,
			Selector:     mg.Spec.InitProvider.Network[i3].VPCIDSelector,
			To: reference.To{
				List:    &v1alpha1.VPCList{},
				Managed: &v1alpha1.VPC{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].VPCID")
		}
		mg.Spec.InitProvider.Network[i3].VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].VPCIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Network[i3].Vswitches),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.Network[i3].VswitchesRefs,
			Selector:      mg.Spec.InitProvider.Network[i3].VswitchesSelector,
			To: reference.To{
				List:    &v1alpha1.VswitchList{},
				Managed: &v1alpha1.Vswitch{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].Vswitches")
		}
		mg.Spec.InitProvider.Network[i3].Vswitches = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Network[i3].VswitchesRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this MembershipAttachment.
func (mg *MembershipAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ClusterIDRef,
		Selector:     mg.Spec.ForProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubClusterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubClusterIDRef,
		Selector:     mg.Spec.ForProvider.SubClusterIDSelector,
		To: reference.To{
			List:    &v1alpha11.ManagedKubernetesList{},
			Managed: &v1alpha11.ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubClusterID")
	}
	mg.Spec.ForProvider.SubClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ClusterIDRef,
		Selector:     mg.Spec.InitProvider.ClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubClusterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubClusterIDRef,
		Selector:     mg.Spec.InitProvider.SubClusterIDSelector,
		To: reference.To{
			List:    &v1alpha11.ManagedKubernetesList{},
			Managed: &v1alpha11.ManagedKubernetes{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubClusterID")
	}
	mg.Spec.InitProvider.SubClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubClusterIDRef = rsp.ResolvedReference

	return nil
}
