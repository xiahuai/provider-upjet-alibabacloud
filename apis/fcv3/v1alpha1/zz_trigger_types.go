// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HTTPTriggerInitParameters struct {
}

type HTTPTriggerObservation struct {

	// The public domain name address. On the Internet, you can access the HTTP Trigger through the HTTP protocol or HTTPS protocol.
	URLInternet *string `json:"urlInternet,omitempty" tf:"url_internet,omitempty"`

	// The private domain name address. In a VPC, you can access the HTTP Trigger through HTTP or HTTPS.
	URLIntranet *string `json:"urlIntranet,omitempty" tf:"url_intranet,omitempty"`
}

type HTTPTriggerParameters struct {
}

type TriggerInitParameters struct {

	// Description of the trigger
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Function Name
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/fcv3/v1alpha1.Function
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// The role required by the event source (such as OSS) to call the function.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.RoleArnExtractor()
	InvocationRole *string `json:"invocationRole,omitempty" tf:"invocation_role,omitempty"`

	// Reference to a Role in ram to populate invocationRole.
	// +kubebuilder:validation:Optional
	InvocationRoleRef *v1.Reference `json:"invocationRoleRef,omitempty" tf:"-"`

	// Selector for a Role in ram to populate invocationRole.
	// +kubebuilder:validation:Optional
	InvocationRoleSelector *v1.Selector `json:"invocationRoleSelector,omitempty" tf:"-"`

	// The version or alias of the function
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Trigger Event source ARN
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig *string `json:"triggerConfig,omitempty" tf:"trigger_config,omitempty"`

	// Trigger Name
	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name,omitempty"`

	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mns_topic and eventbridge.
	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

type TriggerObservation struct {

	// Creation time
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description of the trigger
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Function Name
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// (Available since v1.234.0) HTTP trigger information
	HTTPTrigger []HTTPTriggerObservation `json:"httpTrigger,omitempty" tf:"http_trigger,omitempty"`

	// The ID of the resource supplied above.The value is formulated as <function_name>:<trigger_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The role required by the event source (such as OSS) to call the function.
	InvocationRole *string `json:"invocationRole,omitempty" tf:"invocation_role,omitempty"`

	// (Available since v1.234.0) The last modified time of the trigger
	LastModifiedTime *string `json:"lastModifiedTime,omitempty" tf:"last_modified_time,omitempty"`

	// The version or alias of the function
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Trigger Event source ARN
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// The state of the trigger
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Available since v1.234.0) Resource identity of the function
	TargetArn *string `json:"targetArn,omitempty" tf:"target_arn,omitempty"`

	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig *string `json:"triggerConfig,omitempty" tf:"trigger_config,omitempty"`

	// (Available since v1.234.0) Trigger ID
	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`

	// Trigger Name
	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name,omitempty"`

	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mns_topic and eventbridge.
	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

type TriggerParameters struct {

	// Description of the trigger
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Function Name
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/fcv3/v1alpha1.Function
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in fcv3 to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// The role required by the event source (such as OSS) to call the function.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ram/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-alibabacloud/config/common.RoleArnExtractor()
	// +kubebuilder:validation:Optional
	InvocationRole *string `json:"invocationRole,omitempty" tf:"invocation_role,omitempty"`

	// Reference to a Role in ram to populate invocationRole.
	// +kubebuilder:validation:Optional
	InvocationRoleRef *v1.Reference `json:"invocationRoleRef,omitempty" tf:"-"`

	// Selector for a Role in ram to populate invocationRole.
	// +kubebuilder:validation:Optional
	InvocationRoleSelector *v1.Selector `json:"invocationRoleSelector,omitempty" tf:"-"`

	// The version or alias of the function
	// +kubebuilder:validation:Optional
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Trigger Event source ARN
	// +kubebuilder:validation:Optional
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// Trigger configuration. The configuration varies for different types of triggers.
	// +kubebuilder:validation:Optional
	TriggerConfig *string `json:"triggerConfig,omitempty" tf:"trigger_config,omitempty"`

	// Trigger Name
	// +kubebuilder:validation:Optional
	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name,omitempty"`

	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mns_topic and eventbridge.
	// +kubebuilder:validation:Optional
	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TriggerInitParameters `json:"initProvider,omitempty"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Trigger is the Schema for the Triggers API. Provides a Alicloud FCV3 Trigger resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.qualifier) || (has(self.initProvider) && has(self.initProvider.qualifier))",message="spec.forProvider.qualifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.triggerType) || (has(self.initProvider) && has(self.initProvider.triggerType))",message="spec.forProvider.triggerType is a required parameter"
	Spec   TriggerSpec   `json:"spec"`
	Status TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	Trigger_Kind             = "Trigger"
	Trigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Trigger_Kind}.String()
	Trigger_KindAPIVersion   = Trigger_Kind + "." + CRDGroupVersion.String()
	Trigger_GroupVersionKind = CRDGroupVersion.WithKind(Trigger_Kind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
