// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketCorsCorsRuleInitParameters struct {

	// Specifies whether the headers specified by Access-Control-Request-Headers in the OPTIONS preflight request are allowed. You can use only one asterisk (*) as the wildcard for allowed header. .
	// +listType=set
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// The cross-origin request method that is allowed. Valid values: GET, PUT, DELETE, POST, and HEAD.
	// +listType=set
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// The origins from which cross-origin requests are allowed. .
	// +listType=set
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// The response headers for allowed access requests from applications, such as an XMLHttpRequest object in JavaScript. .
	// +listType=set
	ExposeHeader []*string `json:"exposeHeader,omitempty" tf:"expose_header,omitempty"`

	// The period of time within which the browser can cache the response to an OPTIONS preflight request for the specified resource. Unit: seconds.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type BucketCorsCorsRuleObservation struct {

	// Specifies whether the headers specified by Access-Control-Request-Headers in the OPTIONS preflight request are allowed. You can use only one asterisk (*) as the wildcard for allowed header. .
	// +listType=set
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// The cross-origin request method that is allowed. Valid values: GET, PUT, DELETE, POST, and HEAD.
	// +listType=set
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// The origins from which cross-origin requests are allowed. .
	// +listType=set
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// The response headers for allowed access requests from applications, such as an XMLHttpRequest object in JavaScript. .
	// +listType=set
	ExposeHeader []*string `json:"exposeHeader,omitempty" tf:"expose_header,omitempty"`

	// The period of time within which the browser can cache the response to an OPTIONS preflight request for the specified resource. Unit: seconds.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type BucketCorsCorsRuleParameters struct {

	// Specifies whether the headers specified by Access-Control-Request-Headers in the OPTIONS preflight request are allowed. You can use only one asterisk (*) as the wildcard for allowed header. .
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// The cross-origin request method that is allowed. Valid values: GET, PUT, DELETE, POST, and HEAD.
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedMethods []*string `json:"allowedMethods" tf:"allowed_methods,omitempty"`

	// The origins from which cross-origin requests are allowed. .
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// The response headers for allowed access requests from applications, such as an XMLHttpRequest object in JavaScript. .
	// +kubebuilder:validation:Optional
	// +listType=set
	ExposeHeader []*string `json:"exposeHeader,omitempty" tf:"expose_header,omitempty"`

	// The period of time within which the browser can cache the response to an OPTIONS preflight request for the specified resource. Unit: seconds.
	// +kubebuilder:validation:Optional
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type BucketCorsInitParameters struct {

	// The name of the Bucket.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The Cross-Origin Resource Sharing (CORS) configuration of the Bucket. See cors_rule below.
	CorsRule []BucketCorsCorsRuleInitParameters `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// Specifies whether to return the Vary: Origin header. Valid values: true: returns the Vary: Origin header, regardless of whether the request is a cross-origin request or whether the cross-origin request succeeds. false: does not return the Vary: Origin header. This element is valid only when at least one CORS rule is configured.
	ResponseVary *bool `json:"responseVary,omitempty" tf:"response_vary,omitempty"`
}

type BucketCorsObservation struct {

	// The name of the Bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The Cross-Origin Resource Sharing (CORS) configuration of the Bucket. See cors_rule below.
	CorsRule []BucketCorsCorsRuleObservation `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether to return the Vary: Origin header. Valid values: true: returns the Vary: Origin header, regardless of whether the request is a cross-origin request or whether the cross-origin request succeeds. false: does not return the Vary: Origin header. This element is valid only when at least one CORS rule is configured.
	ResponseVary *bool `json:"responseVary,omitempty" tf:"response_vary,omitempty"`
}

type BucketCorsParameters struct {

	// The name of the Bucket.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/oss/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in oss to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The Cross-Origin Resource Sharing (CORS) configuration of the Bucket. See cors_rule below.
	// +kubebuilder:validation:Optional
	CorsRule []BucketCorsCorsRuleParameters `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Specifies whether to return the Vary: Origin header. Valid values: true: returns the Vary: Origin header, regardless of whether the request is a cross-origin request or whether the cross-origin request succeeds. false: does not return the Vary: Origin header. This element is valid only when at least one CORS rule is configured.
	// +kubebuilder:validation:Optional
	ResponseVary *bool `json:"responseVary,omitempty" tf:"response_vary,omitempty"`
}

// BucketCorsSpec defines the desired state of BucketCors
type BucketCorsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketCorsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketCorsInitParameters `json:"initProvider,omitempty"`
}

// BucketCorsStatus defines the observed state of BucketCors.
type BucketCorsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketCorsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketCors is the Schema for the BucketCorss API. Provides a Alicloud OSS Bucket Cors resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type BucketCors struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.corsRule) || (has(self.initProvider) && has(self.initProvider.corsRule))",message="spec.forProvider.corsRule is a required parameter"
	Spec   BucketCorsSpec   `json:"spec"`
	Status BucketCorsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketCorsList contains a list of BucketCorss
type BucketCorsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketCors `json:"items"`
}

// Repository type metadata.
var (
	BucketCors_Kind             = "BucketCors"
	BucketCors_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketCors_Kind}.String()
	BucketCors_KindAPIVersion   = BucketCors_Kind + "." + CRDGroupVersion.String()
	BucketCors_GroupVersionKind = CRDGroupVersion.WithKind(BucketCors_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketCors{}, &BucketCorsList{})
}
