// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskDeviceMappingInitParameters struct {

	// The device name of disk N in the custom image. Valid values:
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// The size of disk N in the custom image. Unit: GiB. The valid values and default value of DiskDeviceMapping.N.Size vary based on the value of DiskDeviceMapping.N.SnapshotId.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The ID of snapshot N to use to create the custom image. .
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type DiskDeviceMappingObservation struct {

	// The device name of disk N in the custom image. Valid values:
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// Image format.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// Import the bucket of the OSS to which the image belongs.
	ImportOssBucket *string `json:"importOssBucket,omitempty" tf:"import_oss_bucket,omitempty"`

	// Import the object of the OSS to which the image file belongs.
	ImportOssObject *string `json:"importOssObject,omitempty" tf:"import_oss_object,omitempty"`

	// Copy the progress of the task.
	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	// For an image being replicated, return the remaining time of the replication task, in seconds.
	RemainTime *float64 `json:"remainTime,omitempty" tf:"remain_time,omitempty"`

	// The size of disk N in the custom image. Unit: GiB. The valid values and default value of DiskDeviceMapping.N.Size vary based on the value of DiskDeviceMapping.N.SnapshotId.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The ID of snapshot N to use to create the custom image. .
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type DiskDeviceMappingParameters struct {

	// The device name of disk N in the custom image. Valid values:
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// The size of disk N in the custom image. Unit: GiB. The valid values and default value of DiskDeviceMapping.N.Size vary based on the value of DiskDeviceMapping.N.SnapshotId.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The ID of snapshot N to use to create the custom image. .
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type FeaturesInitParameters struct {

	// Specifies whether to support the Non-Volatile Memory Express (NVMe) protocol. Valid values:
	NvmeSupport *string `json:"nvmeSupport,omitempty" tf:"nvme_support,omitempty"`
}

type FeaturesObservation struct {

	// Specifies whether to support the Non-Volatile Memory Express (NVMe) protocol. Valid values:
	NvmeSupport *string `json:"nvmeSupport,omitempty" tf:"nvme_support,omitempty"`
}

type FeaturesParameters struct {

	// Specifies whether to support the Non-Volatile Memory Express (NVMe) protocol. Valid values:
	// +kubebuilder:validation:Optional
	NvmeSupport *string `json:"nvmeSupport,omitempty" tf:"nvme_support,omitempty"`
}

type ImageInitParameters struct {

	// The system architecture of the system disk. If you specify a data disk snapshot to create the system disk of the custom image, you must use Architecture to specify the system architecture of the system disk. Valid values: i386, x86\_64, arm64. Default value: x86\_64.
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The new boot mode of the image. Valid values:
	BootMode *string `json:"bootMode,omitempty" tf:"boot_mode,omitempty"`

	// Not the public attribute and it used to automatically delete dependence snapshots while deleting the image.
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// The new description of the custom image. The description must be 2 to 256 characters in length It cannot start with http:// or https://. This parameter is empty by default, which specifies that the original description is retained.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The mode in which to check the custom image. If you do not specify this parameter, the image is not checked. Only the standard check mode is supported.
	DetectionStrategy *string `json:"detectionStrategy,omitempty" tf:"detection_strategy,omitempty"`

	// Snapshot information for the image See disk_device_mapping below.
	DiskDeviceMapping []DiskDeviceMappingInitParameters `json:"diskDeviceMapping,omitempty" tf:"disk_device_mapping,omitempty"`

	// Features See features below.
	Features []FeaturesInitParameters `json:"features,omitempty" tf:"features,omitempty"`

	// Whether to perform forced deletion. Value range:
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The name of the image family. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.
	ImageFamily *string `json:"imageFamily,omitempty" tf:"image_family,omitempty"`

	// The name of the custom image. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-). By default, this parameter is empty. In this case, the original name is retained.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// The image version.
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The instance ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Instance
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The type of the license that is used to activate the operating system after the image is imported. Set the value to BYOL. BYOL: The license that comes with the source operating system is used. When you use the BYOL license, make sure that your license key is supported by Alibaba Cloud.
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// The operating system distribution for the system disk in the custom image. If you specify a data disk snapshot to create the system disk of the custom image, use Platform to specify the operating system distribution for the system disk. Valid values: Aliyun, Anolis, CentOS, Ubuntu, CoreOS, SUSE, Debian, OpenSUSE, FreeBSD, RedHat, Kylin, UOS, Fedora, Fedora CoreOS, CentOS Stream, AlmaLinux, Rocky Linux, Gentoo, Customized Linux, Others Linux, Windows Server 2022, Windows Server 2019, Windows Server 2016, Windows Server 2012, Windows Server 2008, Windows Server 2003. Default value: Others Linux.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// The ID of the resource group to which to assign the custom image. If you do not specify this parameter, the image is assigned to the default resource group.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The ID of the snapshot that you want to use to create the custom image.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Snapshot
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a Snapshot in ecs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a Snapshot in ecs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageObservation struct {

	// The system architecture of the system disk. If you specify a data disk snapshot to create the system disk of the custom image, you must use Architecture to specify the system architecture of the system disk. Valid values: i386, x86\_64, arm64. Default value: x86\_64.
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The new boot mode of the image. Valid values:
	BootMode *string `json:"bootMode,omitempty" tf:"boot_mode,omitempty"`

	// The create time
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Not the public attribute and it used to automatically delete dependence snapshots while deleting the image.
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// The new description of the custom image. The description must be 2 to 256 characters in length It cannot start with http:// or https://. This parameter is empty by default, which specifies that the original description is retained.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The mode in which to check the custom image. If you do not specify this parameter, the image is not checked. Only the standard check mode is supported.
	DetectionStrategy *string `json:"detectionStrategy,omitempty" tf:"detection_strategy,omitempty"`

	// Snapshot information for the image See disk_device_mapping below.
	DiskDeviceMapping []DiskDeviceMappingObservation `json:"diskDeviceMapping,omitempty" tf:"disk_device_mapping,omitempty"`

	// Features See features below.
	Features []FeaturesObservation `json:"features,omitempty" tf:"features,omitempty"`

	// Whether to perform forced deletion. Value range:
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the image family. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.
	ImageFamily *string `json:"imageFamily,omitempty" tf:"image_family,omitempty"`

	// The name of the custom image. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-). By default, this parameter is empty. In this case, the original name is retained.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// The image version.
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The type of the license that is used to activate the operating system after the image is imported. Set the value to BYOL. BYOL: The license that comes with the source operating system is used. When you use the BYOL license, make sure that your license key is supported by Alibaba Cloud.
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// The operating system distribution for the system disk in the custom image. If you specify a data disk snapshot to create the system disk of the custom image, use Platform to specify the operating system distribution for the system disk. Valid values: Aliyun, Anolis, CentOS, Ubuntu, CoreOS, SUSE, Debian, OpenSUSE, FreeBSD, RedHat, Kylin, UOS, Fedora, Fedora CoreOS, CentOS Stream, AlmaLinux, Rocky Linux, Gentoo, Customized Linux, Others Linux, Windows Server 2022, Windows Server 2019, Windows Server 2016, Windows Server 2012, Windows Server 2008, Windows Server 2003. Default value: Others Linux.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// The ID of the resource group to which to assign the custom image. If you do not specify this parameter, the image is assigned to the default resource group.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The ID of the snapshot that you want to use to create the custom image.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The status of the image. By default, if you do not specify this parameter, only images in the Available state are returned.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageParameters struct {

	// The system architecture of the system disk. If you specify a data disk snapshot to create the system disk of the custom image, you must use Architecture to specify the system architecture of the system disk. Valid values: i386, x86\_64, arm64. Default value: x86\_64.
	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The new boot mode of the image. Valid values:
	// +kubebuilder:validation:Optional
	BootMode *string `json:"bootMode,omitempty" tf:"boot_mode,omitempty"`

	// Not the public attribute and it used to automatically delete dependence snapshots while deleting the image.
	// +kubebuilder:validation:Optional
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// The new description of the custom image. The description must be 2 to 256 characters in length It cannot start with http:// or https://. This parameter is empty by default, which specifies that the original description is retained.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The mode in which to check the custom image. If you do not specify this parameter, the image is not checked. Only the standard check mode is supported.
	// +kubebuilder:validation:Optional
	DetectionStrategy *string `json:"detectionStrategy,omitempty" tf:"detection_strategy,omitempty"`

	// Snapshot information for the image See disk_device_mapping below.
	// +kubebuilder:validation:Optional
	DiskDeviceMapping []DiskDeviceMappingParameters `json:"diskDeviceMapping,omitempty" tf:"disk_device_mapping,omitempty"`

	// Features See features below.
	// +kubebuilder:validation:Optional
	Features []FeaturesParameters `json:"features,omitempty" tf:"features,omitempty"`

	// Whether to perform forced deletion. Value range:
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The name of the image family. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.
	// +kubebuilder:validation:Optional
	ImageFamily *string `json:"imageFamily,omitempty" tf:"image_family,omitempty"`

	// The name of the custom image. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-). By default, this parameter is empty. In this case, the original name is retained.
	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// The image version.
	// +kubebuilder:validation:Optional
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The instance ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The type of the license that is used to activate the operating system after the image is imported. Set the value to BYOL. BYOL: The license that comes with the source operating system is used. When you use the BYOL license, make sure that your license key is supported by Alibaba Cloud.
	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// The operating system distribution for the system disk in the custom image. If you specify a data disk snapshot to create the system disk of the custom image, use Platform to specify the operating system distribution for the system disk. Valid values: Aliyun, Anolis, CentOS, Ubuntu, CoreOS, SUSE, Debian, OpenSUSE, FreeBSD, RedHat, Kylin, UOS, Fedora, Fedora CoreOS, CentOS Stream, AlmaLinux, Rocky Linux, Gentoo, Customized Linux, Others Linux, Windows Server 2022, Windows Server 2019, Windows Server 2016, Windows Server 2012, Windows Server 2008, Windows Server 2003. Default value: Others Linux.
	// +kubebuilder:validation:Optional
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The ID of the resource group to which to assign the custom image. If you do not specify this parameter, the image is assigned to the default resource group.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The ID of the snapshot that you want to use to create the custom image.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-alibabacloud/apis/ecs/v1alpha1.Snapshot
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a Snapshot in ecs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a Snapshot in ecs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageInitParameters `json:"initProvider,omitempty"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Image is the Schema for the Images API. Provides a Alicloud ECS Image resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageSpec   `json:"spec"`
	Status            ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
